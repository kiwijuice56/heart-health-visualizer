//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// preprocess_ppg_signal.cpp
//
// Code generation for function 'preprocess_ppg_signal'
//

// Include files
#include "preprocess_ppg_signal.h"
#include "preprocess_ppg_signal_types.h"
#include "rt_nonfinite.h"
#include "coder_array.h"
#include <algorithm>
#include <cmath>
#include <cstring>

// Type Definitions
namespace coder
{
  namespace internal
  {
    namespace fft
    {
      class FFTImplementationCallback
      {
       public:
        static void doHalfLengthBluestein(const double x[500], creal_T y[500],
          const creal_T wwc[499], const double costabinv[513], const double
          sintabinv[513]);
      };
    }
  }
}

// Variable Definitions
static const double dv[513]{ 1.0, 0.99998117528260111, 0.9999247018391445,
  0.9998305817958234, 0.99969881869620425, 0.99952941750109314,
  0.99932238458834954, 0.99907772775264536, 0.99879545620517241,
  0.99847558057329477, 0.99811811290014918, 0.99772306664419164,
  0.99729045667869021, 0.99682029929116567, 0.996312612182778,
  0.99576741446765982, 0.99518472667219693, 0.99456457073425542,
  0.99390697000235606, 0.9932119492347945, 0.99247953459871, 0.99170975366909953,
  0.99090263542778, 0.99005821026229712, 0.989176509964781, 0.98825756773074946,
  0.98730141815785843, 0.98630809724459867, 0.98527764238894122,
  0.984210092386929, 0.98310548743121629, 0.98196386910955524,
  0.98078528040323043, 0.97956976568544052, 0.97831737071962765,
  0.97702814265775439, 0.97570213003852857, 0.97433938278557586,
  0.97293995220556018, 0.97150389098625178, 0.970031253194544,
  0.96852209427441727, 0.96697647104485207, 0.9653944416976894,
  0.96377606579543984, 0.96212140426904158, 0.96043051941556579,
  0.9587034748958716, 0.95694033573220882, 0.95514116830577078,
  0.95330604035419386, 0.95143502096900834, 0.94952818059303667,
  0.94758559101774109, 0.94560732538052128, 0.94359345816196039,
  0.94154406518302081, 0.93945922360218992, 0.937339011912575,
  0.93518350993894761, 0.932992798834739, 0.93076696107898371,
  0.92850608047321559, 0.92621024213831138, 0.92387953251128674,
  0.9215140393420419, 0.91911385169005777, 0.9166790599210427,
  0.91420975570353069, 0.91170603200542988, 0.90916798309052238,
  0.90659570451491533, 0.90398929312344334, 0.901348847046022,
  0.89867446569395382, 0.89596624975618522, 0.89322430119551532,
  0.89044872324475788, 0.88763962040285393, 0.88479709843093779,
  0.881921264348355, 0.87901222642863353, 0.8760700941954066,
  0.87309497841829009, 0.87008699110871146, 0.86704624551569265,
  0.8639728561215867, 0.86086693863776731, 0.85772861000027212,
  0.85455798836540053, 0.8513551931052652, 0.84812034480329723,
  0.84485356524970712, 0.84155497743689844, 0.83822470555483808,
  0.83486287498638, 0.83146961230254524, 0.8280450452577558, 0.82458930278502529,
  0.82110251499110465, 0.81758481315158371, 0.81403632970594841,
  0.81045719825259477, 0.80684755354379933, 0.80320753148064494,
  0.799537269107905, 0.79583690460888357, 0.79210657730021239,
  0.78834642762660634, 0.78455659715557524, 0.78073722857209449,
  0.77688846567323244, 0.773010453362737, 0.7691033376455797, 0.765167265622459,
  0.76120238548426178, 0.75720884650648457, 0.75318679904361252,
  0.74913639452345937, 0.745057785441466, 0.74095112535495922,
  0.73681656887736979, 0.73265427167241282, 0.7284643904482252,
  0.724247082951467, 0.72000250796138165, 0.71573082528381859,
  0.71143219574521643, 0.70710678118654757, 0.7027547444572253,
  0.69837624940897292, 0.69397146088965389, 0.68954054473706683,
  0.68508366777270036, 0.680600997795453, 0.67609270357531592,
  0.67155895484701833, 0.66699992230363747, 0.66241577759017178,
  0.65780669329707864, 0.65317284295377676, 0.64851440102211244,
  0.64383154288979139, 0.63912444486377573, 0.63439328416364549,
  0.629638238914927, 0.62485948814238634, 0.6200572117632891,
  0.61523159058062682, 0.61038280627630948, 0.60551104140432555,
  0.600616479383869, 0.59569930449243336, 0.59075970185887416,
  0.58579785745643886, 0.58081395809576453, 0.57580819141784534,
  0.57078074588696726, 0.56573181078361312, 0.560661576197336,
  0.55557023301960218, 0.55045797293660481, 0.54532498842204646,
  0.54017147272989285, 0.53499761988709715, 0.52980362468629461,
  0.524589682678469, 0.51935599016558964, 0.51410274419322166, 0.508830142543107,
  0.50353838372571758, 0.49822766697278181, 0.49289819222978404,
  0.487550160148436, 0.48218377207912272, 0.47679923006332209,
  0.47139673682599764, 0.46597649576796618, 0.46053871095824,
  0.45508358712634384, 0.44961132965460654, 0.4441221445704292,
  0.43861623853852766, 0.43309381885315196, 0.42755509343028208,
  0.42200027079979968, 0.41642956009763715, 0.41084317105790391,
  0.40524131400498986, 0.39962419984564679, 0.3939920400610481,
  0.38834504669882625, 0.38268343236508978, 0.37700741021641826,
  0.37131719395183749, 0.36561299780477385, 0.35989503653498811,
  0.35416352542049034, 0.34841868024943456, 0.34266071731199438,
  0.33688985339222005, 0.33110630575987643, 0.32531029216226293,
  0.31950203081601569, 0.31368174039889152, 0.30784964004153487,
  0.30200594931922808, 0.29615088824362379, 0.29028467725446233,
  0.28440753721127188, 0.27851968938505306, 0.272621355449949,
  0.26671275747489837, 0.26079411791527551, 0.25486565960451457,
  0.24892760574572015, 0.24298017990326387, 0.2370236059943672,
  0.23105810828067111, 0.22508391135979283, 0.2191012401568698,
  0.21311031991609136, 0.20711137619221856, 0.2011046348420919,
  0.19509032201612825, 0.18906866414980619, 0.18303988795514095,
  0.17700422041214875, 0.17096188876030122, 0.16491312048996992,
  0.15885814333386145, 0.15279718525844344, 0.14673047445536175,
  0.14065823933284921, 0.13458070850712617, 0.12849811079379317,
  0.1224106751992162, 0.11631863091190475, 0.11022220729388306,
  0.10412163387205459, 0.0980171403295606, 0.091908956497132724,
  0.0857973123444399, 0.079682437971430126, 0.073564563599667426,
  0.067443919563664051, 0.061320736302208578, 0.055195244349689941,
  0.049067674327418015, 0.04293825693494082, 0.036807222941358832,
  0.030674803176636626, 0.024541228522912288, 0.01840672990580482,
  0.012271538285719925, 0.0061358846491544753, 0.0, -0.0061358846491544753,
  -0.012271538285719925, -0.01840672990580482, -0.024541228522912288,
  -0.030674803176636626, -0.036807222941358832, -0.04293825693494082,
  -0.049067674327418015, -0.055195244349689941, -0.061320736302208578,
  -0.067443919563664051, -0.073564563599667426, -0.079682437971430126,
  -0.0857973123444399, -0.091908956497132724, -0.0980171403295606,
  -0.10412163387205459, -0.11022220729388306, -0.11631863091190475,
  -0.1224106751992162, -0.12849811079379317, -0.13458070850712617,
  -0.14065823933284921, -0.14673047445536175, -0.15279718525844344,
  -0.15885814333386145, -0.16491312048996992, -0.17096188876030122,
  -0.17700422041214875, -0.18303988795514095, -0.18906866414980619,
  -0.19509032201612825, -0.2011046348420919, -0.20711137619221856,
  -0.21311031991609136, -0.2191012401568698, -0.22508391135979283,
  -0.23105810828067111, -0.2370236059943672, -0.24298017990326387,
  -0.24892760574572015, -0.25486565960451457, -0.26079411791527551,
  -0.26671275747489837, -0.272621355449949, -0.27851968938505306,
  -0.28440753721127188, -0.29028467725446233, -0.29615088824362379,
  -0.30200594931922808, -0.30784964004153487, -0.31368174039889152,
  -0.31950203081601569, -0.32531029216226293, -0.33110630575987643,
  -0.33688985339222005, -0.34266071731199438, -0.34841868024943456,
  -0.35416352542049034, -0.35989503653498811, -0.36561299780477385,
  -0.37131719395183749, -0.37700741021641826, -0.38268343236508978,
  -0.38834504669882625, -0.3939920400610481, -0.39962419984564679,
  -0.40524131400498986, -0.41084317105790391, -0.41642956009763715,
  -0.42200027079979968, -0.42755509343028208, -0.43309381885315196,
  -0.43861623853852766, -0.4441221445704292, -0.44961132965460654,
  -0.45508358712634384, -0.46053871095824, -0.46597649576796618,
  -0.47139673682599764, -0.47679923006332209, -0.48218377207912272,
  -0.487550160148436, -0.49289819222978404, -0.49822766697278181,
  -0.50353838372571758, -0.508830142543107, -0.51410274419322166,
  -0.51935599016558964, -0.524589682678469, -0.52980362468629461,
  -0.53499761988709715, -0.54017147272989285, -0.54532498842204646,
  -0.55045797293660481, -0.55557023301960218, -0.560661576197336,
  -0.56573181078361312, -0.57078074588696726, -0.57580819141784534,
  -0.58081395809576453, -0.58579785745643886, -0.59075970185887416,
  -0.59569930449243336, -0.600616479383869, -0.60551104140432555,
  -0.61038280627630948, -0.61523159058062682, -0.6200572117632891,
  -0.62485948814238634, -0.629638238914927, -0.63439328416364549,
  -0.63912444486377573, -0.64383154288979139, -0.64851440102211244,
  -0.65317284295377676, -0.65780669329707864, -0.66241577759017178,
  -0.66699992230363747, -0.67155895484701833, -0.67609270357531592,
  -0.680600997795453, -0.68508366777270036, -0.68954054473706683,
  -0.69397146088965389, -0.69837624940897292, -0.7027547444572253,
  -0.70710678118654757, -0.71143219574521643, -0.71573082528381859,
  -0.72000250796138165, -0.724247082951467, -0.7284643904482252,
  -0.73265427167241282, -0.73681656887736979, -0.74095112535495922,
  -0.745057785441466, -0.74913639452345937, -0.75318679904361252,
  -0.75720884650648457, -0.76120238548426178, -0.765167265622459,
  -0.7691033376455797, -0.773010453362737, -0.77688846567323244,
  -0.78073722857209449, -0.78455659715557524, -0.78834642762660634,
  -0.79210657730021239, -0.79583690460888357, -0.799537269107905,
  -0.80320753148064494, -0.80684755354379933, -0.81045719825259477,
  -0.81403632970594841, -0.81758481315158371, -0.82110251499110465,
  -0.82458930278502529, -0.8280450452577558, -0.83146961230254524,
  -0.83486287498638, -0.83822470555483808, -0.84155497743689844,
  -0.84485356524970712, -0.84812034480329723, -0.8513551931052652,
  -0.85455798836540053, -0.85772861000027212, -0.86086693863776731,
  -0.8639728561215867, -0.86704624551569265, -0.87008699110871146,
  -0.87309497841829009, -0.8760700941954066, -0.87901222642863353,
  -0.881921264348355, -0.88479709843093779, -0.88763962040285393,
  -0.89044872324475788, -0.89322430119551532, -0.89596624975618522,
  -0.89867446569395382, -0.901348847046022, -0.90398929312344334,
  -0.90659570451491533, -0.90916798309052238, -0.91170603200542988,
  -0.91420975570353069, -0.9166790599210427, -0.91911385169005777,
  -0.9215140393420419, -0.92387953251128674, -0.92621024213831138,
  -0.92850608047321559, -0.93076696107898371, -0.932992798834739,
  -0.93518350993894761, -0.937339011912575, -0.93945922360218992,
  -0.94154406518302081, -0.94359345816196039, -0.94560732538052128,
  -0.94758559101774109, -0.94952818059303667, -0.95143502096900834,
  -0.95330604035419386, -0.95514116830577078, -0.95694033573220882,
  -0.9587034748958716, -0.96043051941556579, -0.96212140426904158,
  -0.96377606579543984, -0.9653944416976894, -0.96697647104485207,
  -0.96852209427441727, -0.970031253194544, -0.97150389098625178,
  -0.97293995220556018, -0.97433938278557586, -0.97570213003852857,
  -0.97702814265775439, -0.97831737071962765, -0.97956976568544052,
  -0.98078528040323043, -0.98196386910955524, -0.98310548743121629,
  -0.984210092386929, -0.98527764238894122, -0.98630809724459867,
  -0.98730141815785843, -0.98825756773074946, -0.989176509964781,
  -0.99005821026229712, -0.99090263542778, -0.99170975366909953,
  -0.99247953459871, -0.9932119492347945, -0.99390697000235606,
  -0.99456457073425542, -0.99518472667219693, -0.99576741446765982,
  -0.996312612182778, -0.99682029929116567, -0.99729045667869021,
  -0.99772306664419164, -0.99811811290014918, -0.99847558057329477,
  -0.99879545620517241, -0.99907772775264536, -0.99932238458834954,
  -0.99952941750109314, -0.99969881869620425, -0.9998305817958234,
  -0.9999247018391445, -0.99998117528260111, -1.0 };

// Function Declarations
static int MultiWord2sLong(const unsigned int u[]);
static void MultiWordAdd(const unsigned int u1[], const unsigned int u2[],
  unsigned int y[]);
static void MultiWordNeg(const unsigned int u1[], unsigned int y[]);
static void MultiWordSetUnsignedMax(unsigned int y[]);
static void MultiWordSub(const unsigned int u1[], const unsigned int u2[],
  unsigned int y[], int n);
namespace coder
{
  static void b_abs(const array<double, 2U> &x, array<double, 2U> &y);
  static void b_findpeaks(const double Yin[500], double Ypk_data[], int
    Ypk_size[2], double Xpk_data[], int Xpk_size[2]);
  static double combineVectorElements(const array<double, 2U> &x);
  static void detrend(const array<double, 2U> &x, array<double, 2U> &y);
  static void do_vectors(const array<int, 1U> &a, const array<int, 1U> &b, array<
    int, 1U> &c, array<int, 1U> &ia, array<int, 1U> &ib);
  static double dot(const double a_data[], const int a_size[2], const array<
                    double, 2U> &b);
  static void filter(const array<double, 2U> &x, array<double, 2U> &y);
  static void filter(const double x[500], double y[500]);
  static void findpeaks(const double Yin[426], double Ypk_data[], int Ypk_size[2],
                        double Xpk_data[], int Xpk_size[2]);
  static void findpeaks(const array<double, 2U> &Yin, array<double, 2U> &Ypk,
                        array<double, 2U> &Xpk);
  static void gradient(const double x[500], double varargout_1[500]);
  static void gradient(const double x_data[], const int x_size[2], double
                       varargout_1_data[], int varargout_1_size[2]);
  namespace internal
  {
    namespace blas
    {
      static double xnrm2(int n, const array<double, 2U> &x, int ix0);
    }

    static int64m_T i64ddiv(const int64m_T x);
    namespace lapack
    {
      static int xgeqp3(array<double, 2U> &A, double tau_data[], int jpvt[2]);
    }

    static double maximum(const array<double, 2U> &x);
    static double maximum(const double x[2]);
    static double minimum(const double x[2]);
    static double minimum(const double x_data[], const int x_size[2], int &idx);
  }

  static void interp1(const array<double, 2U> &varargin_1, const array<double,
                      2U> &varargin_2, const double varargin_3[500], double Vq
                      [500]);
  static void interp1(const array<double, 2U> &varargin_1, const array<double,
                      2U> &varargin_2, const array<double, 2U> &varargin_3,
                      array<double, 2U> &Vq);
  static void linspace(double d2, double y[500]);
  static void linspace(double d1, double d2, const int64m_T n, array<double, 2U>
                       &y);
  static void pchip(const array<double, 2U> &x, const array<double, 2U> &y,
                    array<double, 2U> &v_breaks, array<double, 2U> &v_coefs);
  static double ppval(const array<double, 2U> &pp_breaks, const array<double, 2U>
                      &pp_coefs, double x);
}

static double find_pulse_points(const double processed_pulse[500], double
  &diastolic_peak, double &dicrotic_notch);
static void minus(coder::array<double, 1U> &in1, const coder::array<double, 1U>
                  &in2);
static double sMultiWord2Double(const unsigned int u1[]);
static void sMultiWord2MultiWord(const unsigned int u1[], unsigned int y[], int
  n);
static void sMultiWord2sMultiWordSat(const unsigned int u1[], unsigned int y[]);
static int sMultiWordCmp(const unsigned int u1[], const unsigned int u2[]);
static bool sMultiWordGt(const unsigned int u1[], const unsigned int u2[]);
static bool sMultiWordLt(const unsigned int u1[], const unsigned int u2[]);
static void sMultiWordMul(const unsigned int u1[], const unsigned int u2[],
  unsigned int y[]);
static void uMultiWord2MultiWord(const unsigned int u1[], int n1, unsigned int
  y[]);
static int uMultiWordCmp(const unsigned int u1[], const unsigned int u2[]);
static int uMultiWordDiv(unsigned int a[], unsigned int b[], unsigned int q[],
  unsigned int r[]);
static void uMultiWordDivZero(const unsigned int u1[], const unsigned int u2[],
  unsigned int b_y1[], unsigned int y2[], unsigned int t1[], unsigned int t2[]);
static bool uMultiWordEq(const unsigned int u1[], const unsigned int u2[]);
static bool uMultiWordGe(const unsigned int u1[], const unsigned int u2[]);
static bool uMultiWordGt(const unsigned int u1[], const unsigned int u2[]);
static bool uMultiWordLe(const unsigned int u1[], const unsigned int u2[]);
static void uMultiWordMul(const unsigned int u1[], const unsigned int u2[],
  unsigned int y[]);
static void uMultiWordShl(const unsigned int u1[], unsigned int n2, unsigned int
  y[]);
static void uMultiWordShr(const unsigned int u1[], unsigned int n2, unsigned int
  y[]);

// Function Definitions
namespace coder
{
  namespace internal
  {
    namespace fft
    {
      void FFTImplementationCallback::doHalfLengthBluestein(const double x[500],
        creal_T y[500], const creal_T wwc[499], const double costabinv[513],
        const double sintabinv[513])
      {
        static const creal_T reconVar1[250]{ { 1.0,// re
            -1.0                       // im
          }, { 0.98743396011664741,    // re
            -0.99992104420381611       // im
          }, { 0.97486990455666256,    // re
            -0.99968418928329994       // im
          }, { 0.96230981733006549,    // re
            -0.9992894726405892        // im
          }, { 0.9497556818202304,     // re
            -0.99873695660601747       // im
          }, { 0.93720948047068664,    // re
            -0.99802672842827156       // im
          }, { 0.92467319447206731,    // re
            -0.99715890026061393       // im
          }, { 0.91214880344925686,    // re
            -0.9961336091431725        // im
          }, { 0.89963828514878508,    // re
            -0.99495101698130017       // im
          }, { 0.88714361512651829,    // re
            -0.9936113105200084        // im
          }, { 0.87466676643569574,    // re
            -0.99211470131447788       // im
          }, { 0.86220970931536189,    // re
            -0.99046142569665119       // im
          }, { 0.84977441087924288,    // re
            -0.98865174473791406       // im
          }, { 0.83736283480511642,    // re
            -0.986685944207868         // im
          }, { 0.824976941024724,      // re
            -0.98456433452920533       // im
          }, { 0.8126186854142754,     // re
            -0.98228725072868872       // im
          }, { 0.800290019485593,      // re
            -0.97985505238424686       // im
          }, { 0.78799289007794537,    // re
            -0.97726812356819348       // im
          }, { 0.77572923905061886,    // re
            -0.97452687278657713       // im
          }, { 0.76350100297627532,    // re
            -0.971631732914674         // im
          }, { 0.75131011283514515,    // re
            -0.96858316112863108       // im
          }, { 0.739158493710103,      // re
            -0.96538163883327388       // im
          }, { 0.72704806448267478,    // re
            -0.96202767158608593       // im
          }, { 0.71498073753002389,    // re
            -0.95852178901737584       // im
          }, { 0.70295841842296514,    // re
            -0.954864544746643         // im
          }, { 0.69098300562505255,    // re
            -0.95105651629515353       // im
          }, { 0.67905639019279052,    // re
            -0.94709830499474434       // im
          }, { 0.66718045547701332,    // re
            -0.94299053589286441       // im
          }, { 0.65535707682548294,    // re
            -0.93873385765387407       // im
          }, { 0.64358812128674925,    // re
            -0.934328942456612         // im
          }, { 0.63187544731532208,    // re
            -0.92977648588825135       // im
          }, { 0.62022090447819889,    // re
            -0.925077206834458         // im
          }, { 0.60862633316279757,    // re
            -0.92023184736587038       // im
          }, { 0.59709356428633731,    // re
            -0.91524117262091753       // im
          }, { 0.58562441900671591,    // re
            -0.91010597068499566       // im
          }, { 0.57422070843492734,    // re
            -0.90482705246601958       // im
          }, { 0.56288423334906712,    // re
            -0.89940525156637108       // im
          }, { 0.55161678390996771,    // re
            -0.89384142415126377       // im
          }, { 0.54042013937851219,    // re
            -0.88813644881354448       // im
          }, { 0.52929606783466743,    // re
            -0.88229122643495328       // im
          }, { 0.51824632589828468,    // re
            -0.87630668004386358       // im
          }, { 0.50727265845170844,    // re
            -0.87018375466952569       // im
          }, { 0.4963767983642392,     // re
            -0.86392341719283527       // im
          }, { 0.48556046621849358,    // re
            -0.85752665619365231       // im
          }, { 0.47482537003870429,    // re
            -0.85099448179469184       // im
          }, { 0.46417320502100334,    // re
            -0.84432792550201508       // im
          }, { 0.45360565326573088,    // re
            -0.83752804004214165       // im
          }, { 0.44312438351181205,    // re
            -0.83059589919581267       // im
          }, { 0.43273105087324348,    // re
            -0.82353259762842745       // im
          }, { 0.42242729657773248,    // re
            -0.81633925071718394       // im
          }, { 0.41221474770752686,    // re
            -0.80901699437494745       // im
          }, { 0.40209501694248118,    // re
            -0.80156698487087663       // im
          }, { 0.39206970230539462,    // re
            -0.79399039864783538       // im
          }, { 0.38214038690966567,    // re
            -0.78628843213661892       // im
          }, { 0.37230863870929953,    // re
            -0.77846230156702334       // im
          }, { 0.36257601025131025,    // re
            -0.77051324277578914       // im
          }, { 0.35294403843055566,    // re
            -0.76244251101144789       // im
          }, { 0.34341424424704348,    // re
            -0.75425138073610376       // im
          }, { 0.33398813256574833,    // re
            -0.74594114542418211       // im
          }, { 0.32466719187897553,    // re
            -0.73751311735817393       // im
          }, { 0.31545289407131127,    // re
            -0.72896862742141155       // im
          }, { 0.30634669418719507,    // re
            -0.72030902488790693       // im
          }, { 0.29735003020115081,    // re
            -0.71153567720928534       // im
          }, { 0.28846432279071466,    // re
            -0.70264996979884919       // im
          }, { 0.27969097511209307,    // re
            -0.69365330581280493       // im
          }, { 0.27103137257858845,    // re
            -0.68454710592868873       // im
          }, { 0.26248688264182607,    // re
            -0.67533280812102447       // im
          }, { 0.25405885457581789,    // re
            -0.66601186743425167       // im
          }, { 0.24574861926389624,    // re
            -0.65658575575295652       // im
          }, { 0.23755748898855211,    // re
            -0.64705596156944434       // im
          }, { 0.22948675722421086,    // re
            -0.63742398974868975       // im
          }, { 0.22153769843297666,    // re
            -0.62769136129070047       // im
          }, { 0.21371156786338108,    // re
            -0.61785961309033433       // im
          }, { 0.20600960135216462,    // re
            -0.60793029769460538       // im
          }, { 0.19843301512912337,    // re
            -0.59790498305751882       // im
          }, { 0.19098300562505255,    // re
            -0.58778525229247314       // im
          }, { 0.18366074928281606,    // re
            -0.57757270342226752       // im
          }, { 0.17646740237157255,    // re
            -0.56726894912675652       // im
          }, { 0.16940410080418733,    // re
            -0.556875616488188         // im
          }, { 0.16247195995785835,    // re
            -0.54639434673426912       // im
          }, { 0.15567207449798492,    // re
            -0.53582679497899666       // im
          }, { 0.14900551820530816,    // re
            -0.52517462996129571       // im
          }, { 0.14247334380634769,    // re
            -0.51443953378150642       // im
          }, { 0.13607658280716473,    // re
            -0.5036232016357608        // im
          }, { 0.12981624533047431,    // re
            -0.49272734154829156       // im
          }, { 0.12369331995613642,    // re
            -0.48175367410171532       // im
          }, { 0.11770877356504672,    // re
            -0.47070393216533257       // im
          }, { 0.11186355118645552,    // re
            -0.45957986062148787       // im
          }, { 0.10615857584873623,    // re
            -0.44838321609003223       // im
          }, { 0.10059474843362892,    // re
            -0.43711576665093288       // im
          }, { 0.095172947533980423,   // re
            -0.42577929156507266       // im
          }, { 0.089894029315004342,   // re
            -0.41437558099328414       // im
          }, { 0.084758827379082469,   // re
            -0.40290643571366264       // im
          }, { 0.079768152634129619,   // re
            -0.39137366683720243       // im
          }, { 0.074922793165541957,   // re
            -0.37977909552180111       // im
          }, { 0.070223514111748653,   // re
            -0.368124552684678         // im
          }, { 0.065671057543387978,   // re
            -0.35641187871325075       // im
          }, { 0.061266142346125929,   // re
            -0.34464292317451706       // im
          }, { 0.057009464107135588,   // re
            -0.33281954452298668       // im
          }, { 0.052901695005255656,   // re
            -0.32094360980720948       // im
          }, { 0.048943483704846469,   // re
            -0.3090169943749474        // im
          }, { 0.045135455253357049,   // re
            -0.29704158157703492       // im
          }, { 0.041478210982624164,   // re
            -0.28501926246997611       // im
          }, { 0.037972328413914069,   // re
            -0.27295193551732522       // im
          }, { 0.034618361166726119,   // re
            -0.26084150628989694       // im
          }, { 0.031416838871368924,   // re
            -0.24868988716485479       // im
          }, { 0.028368267085326027,   // re
            -0.23649899702372471       // im
          }, { 0.025473127213422875,   // re
            -0.22427076094938117       // im
          }, { 0.022731876431806519,   // re
            -0.21200710992205465       // im
          }, { 0.020144947615753139,   // re
            -0.19970998051440703       // im
          }, { 0.017712749271311279,   // re
            -0.18738131458572463       // im
          }, { 0.015435665470794668,   // re
            -0.17502305897527606       // im
          }, { 0.013314055792131962,   // re
            -0.16263716519488358       // im
          }, { 0.011348255262085938,   // re
            -0.15022558912075706       // im
          }, { 0.0095385743033488124,  // re
            -0.13779029068463808       // im
          }, { 0.0078852986855221241,  // re
            -0.12533323356430426       // im
          }, { 0.006388689479991605,   // re
            -0.11285638487348168       // im
          }, { 0.0050489830186998264,  // re
            -0.10036171485121489       // im
          }, { 0.0038663908568274952,  // re
            -0.08785119655074318       // im
          }, { 0.002841099739386066,   // re
            -0.075326805527932722      // im
          }, { 0.001973271571728441,   // re
            -0.062790519529313374      // im
          }, { 0.0012630433939825325,  // re
            -0.050244318179769556      // im
          }, { 0.00071052735941079526, // re
            -0.037690182669934541      // im
          }, { 0.00031581071670006011, // re
            -0.025130095443337479      // im
          }, { 7.895579618388826E-5,   // re
            -0.012566039883352607      // im
          }, { 0.0,                    // re
            -0.0                       // im
          }, { 7.895579618388826E-5,   // re
            0.012566039883352607       // im
          }, { 0.00031581071670006011, // re
            0.025130095443337479       // im
          }, { 0.00071052735941079526, // re
            0.037690182669934541       // im
          }, { 0.0012630433939825325,  // re
            0.050244318179769556       // im
          }, { 0.001973271571728441,   // re
            0.062790519529313374       // im
          }, { 0.002841099739386066,   // re
            0.075326805527932722       // im
          }, { 0.0038663908568274952,  // re
            0.08785119655074318        // im
          }, { 0.0050489830186998264,  // re
            0.10036171485121489        // im
          }, { 0.006388689479991605,   // re
            0.11285638487348168        // im
          }, { 0.0078852986855221241,  // re
            0.12533323356430426        // im
          }, { 0.0095385743033488124,  // re
            0.13779029068463808        // im
          }, { 0.011348255262085938,   // re
            0.15022558912075706        // im
          }, { 0.013314055792131962,   // re
            0.16263716519488358        // im
          }, { 0.015435665470794668,   // re
            0.17502305897527606        // im
          }, { 0.017712749271311279,   // re
            0.18738131458572463        // im
          }, { 0.020144947615753139,   // re
            0.19970998051440703        // im
          }, { 0.022731876431806519,   // re
            0.21200710992205465        // im
          }, { 0.025473127213422875,   // re
            0.22427076094938117        // im
          }, { 0.028368267085326027,   // re
            0.23649899702372471        // im
          }, { 0.031416838871368924,   // re
            0.24868988716485479        // im
          }, { 0.034618361166726119,   // re
            0.26084150628989694        // im
          }, { 0.037972328413914069,   // re
            0.27295193551732522        // im
          }, { 0.041478210982624164,   // re
            0.28501926246997611        // im
          }, { 0.045135455253357049,   // re
            0.29704158157703492        // im
          }, { 0.048943483704846469,   // re
            0.3090169943749474         // im
          }, { 0.052901695005255656,   // re
            0.32094360980720948        // im
          }, { 0.057009464107135588,   // re
            0.33281954452298668        // im
          }, { 0.061266142346125929,   // re
            0.34464292317451706        // im
          }, { 0.065671057543387978,   // re
            0.35641187871325075        // im
          }, { 0.070223514111748653,   // re
            0.368124552684678          // im
          }, { 0.074922793165541957,   // re
            0.37977909552180111        // im
          }, { 0.079768152634129619,   // re
            0.39137366683720243        // im
          }, { 0.084758827379082469,   // re
            0.40290643571366264        // im
          }, { 0.089894029315004342,   // re
            0.41437558099328414        // im
          }, { 0.095172947533980423,   // re
            0.42577929156507266        // im
          }, { 0.10059474843362892,    // re
            0.43711576665093288        // im
          }, { 0.10615857584873623,    // re
            0.44838321609003223        // im
          }, { 0.11186355118645552,    // re
            0.45957986062148787        // im
          }, { 0.11770877356504672,    // re
            0.47070393216533257        // im
          }, { 0.12369331995613642,    // re
            0.48175367410171532        // im
          }, { 0.12981624533047431,    // re
            0.49272734154829156        // im
          }, { 0.13607658280716473,    // re
            0.5036232016357608         // im
          }, { 0.14247334380634769,    // re
            0.51443953378150642        // im
          }, { 0.14900551820530816,    // re
            0.52517462996129571        // im
          }, { 0.15567207449798492,    // re
            0.53582679497899666        // im
          }, { 0.16247195995785835,    // re
            0.54639434673426912        // im
          }, { 0.16940410080418733,    // re
            0.556875616488188          // im
          }, { 0.17646740237157255,    // re
            0.56726894912675652        // im
          }, { 0.18366074928281606,    // re
            0.57757270342226752        // im
          }, { 0.19098300562505255,    // re
            0.58778525229247314        // im
          }, { 0.19843301512912337,    // re
            0.59790498305751882        // im
          }, { 0.20600960135216462,    // re
            0.60793029769460538        // im
          }, { 0.21371156786338108,    // re
            0.61785961309033433        // im
          }, { 0.22153769843297666,    // re
            0.62769136129070047        // im
          }, { 0.22948675722421086,    // re
            0.63742398974868975        // im
          }, { 0.23755748898855211,    // re
            0.64705596156944434        // im
          }, { 0.24574861926389624,    // re
            0.65658575575295652        // im
          }, { 0.25405885457581789,    // re
            0.66601186743425167        // im
          }, { 0.26248688264182607,    // re
            0.67533280812102447        // im
          }, { 0.27103137257858845,    // re
            0.68454710592868873        // im
          }, { 0.27969097511209307,    // re
            0.69365330581280493        // im
          }, { 0.28846432279071466,    // re
            0.70264996979884919        // im
          }, { 0.29735003020115081,    // re
            0.71153567720928534        // im
          }, { 0.30634669418719507,    // re
            0.72030902488790693        // im
          }, { 0.31545289407131127,    // re
            0.72896862742141155        // im
          }, { 0.32466719187897553,    // re
            0.73751311735817393        // im
          }, { 0.33398813256574833,    // re
            0.74594114542418211        // im
          }, { 0.34341424424704348,    // re
            0.75425138073610376        // im
          }, { 0.35294403843055566,    // re
            0.76244251101144789        // im
          }, { 0.36257601025131025,    // re
            0.77051324277578914        // im
          }, { 0.37230863870929953,    // re
            0.77846230156702334        // im
          }, { 0.38214038690966567,    // re
            0.78628843213661892        // im
          }, { 0.39206970230539462,    // re
            0.79399039864783538        // im
          }, { 0.40209501694248118,    // re
            0.80156698487087663        // im
          }, { 0.41221474770752686,    // re
            0.80901699437494745        // im
          }, { 0.42242729657773248,    // re
            0.81633925071718394        // im
          }, { 0.43273105087324348,    // re
            0.82353259762842745        // im
          }, { 0.44312438351181205,    // re
            0.83059589919581267        // im
          }, { 0.45360565326573088,    // re
            0.83752804004214165        // im
          }, { 0.46417320502100334,    // re
            0.84432792550201508        // im
          }, { 0.47482537003870429,    // re
            0.85099448179469184        // im
          }, { 0.48556046621849358,    // re
            0.85752665619365231        // im
          }, { 0.4963767983642392,     // re
            0.86392341719283527        // im
          }, { 0.50727265845170844,    // re
            0.87018375466952569        // im
          }, { 0.51824632589828468,    // re
            0.87630668004386358        // im
          }, { 0.52929606783466743,    // re
            0.88229122643495328        // im
          }, { 0.54042013937851219,    // re
            0.88813644881354448        // im
          }, { 0.55161678390996771,    // re
            0.89384142415126377        // im
          }, { 0.56288423334906712,    // re
            0.89940525156637108        // im
          }, { 0.57422070843492734,    // re
            0.90482705246601958        // im
          }, { 0.58562441900671591,    // re
            0.91010597068499566        // im
          }, { 0.59709356428633731,    // re
            0.91524117262091753        // im
          }, { 0.60862633316279757,    // re
            0.92023184736587038        // im
          }, { 0.62022090447819889,    // re
            0.925077206834458          // im
          }, { 0.63187544731532208,    // re
            0.92977648588825135        // im
          }, { 0.64358812128674925,    // re
            0.934328942456612          // im
          }, { 0.65535707682548294,    // re
            0.93873385765387407        // im
          }, { 0.66718045547701332,    // re
            0.94299053589286441        // im
          }, { 0.67905639019279052,    // re
            0.94709830499474434        // im
          }, { 0.69098300562505255,    // re
            0.95105651629515353        // im
          }, { 0.70295841842296514,    // re
            0.954864544746643          // im
          }, { 0.71498073753002389,    // re
            0.95852178901737584        // im
          }, { 0.72704806448267478,    // re
            0.96202767158608593        // im
          }, { 0.739158493710103,      // re
            0.96538163883327388        // im
          }, { 0.75131011283514515,    // re
            0.96858316112863108        // im
          }, { 0.76350100297627532,    // re
            0.971631732914674          // im
          }, { 0.77572923905061886,    // re
            0.97452687278657713        // im
          }, { 0.78799289007794537,    // re
            0.97726812356819348        // im
          }, { 0.800290019485593,      // re
            0.97985505238424686        // im
          }, { 0.8126186854142754,     // re
            0.98228725072868872        // im
          }, { 0.824976941024724,      // re
            0.98456433452920533        // im
          }, { 0.83736283480511642,    // re
            0.986685944207868          // im
          }, { 0.84977441087924288,    // re
            0.98865174473791406        // im
          }, { 0.86220970931536189,    // re
            0.99046142569665119        // im
          }, { 0.87466676643569574,    // re
            0.99211470131447788        // im
          }, { 0.88714361512651829,    // re
            0.9936113105200084         // im
          }, { 0.89963828514878508,    // re
            0.99495101698130017        // im
          }, { 0.91214880344925686,    // re
            0.9961336091431725         // im
          }, { 0.92467319447206731,    // re
            0.99715890026061393        // im
          }, { 0.93720948047068664,    // re
            0.99802672842827156        // im
          }, { 0.9497556818202304,     // re
            0.99873695660601747        // im
          }, { 0.96230981733006549,    // re
            0.9992894726405892         // im
          }, { 0.97486990455666256,    // re
            0.99968418928329994        // im
          }, { 0.98743396011664741,    // re
            0.99992104420381611        // im
          } };

        static const creal_T reconVar2[250]{ { 1.0,// re
            1.0                        // im
          }, { 1.0125660398833527,     // re
            0.99992104420381611        // im
          }, { 1.0251300954433376,     // re
            0.99968418928329994        // im
          }, { 1.0376901826699345,     // re
            0.9992894726405892         // im
          }, { 1.0502443181797696,     // re
            0.99873695660601747        // im
          }, { 1.0627905195293135,     // re
            0.99802672842827156        // im
          }, { 1.0753268055279328,     // re
            0.99715890026061393        // im
          }, { 1.0878511965507431,     // re
            0.9961336091431725         // im
          }, { 1.1003617148512148,     // re
            0.99495101698130017        // im
          }, { 1.1128563848734816,     // re
            0.9936113105200084         // im
          }, { 1.1253332335643043,     // re
            0.99211470131447788        // im
          }, { 1.137790290684638,      // re
            0.99046142569665119        // im
          }, { 1.1502255891207571,     // re
            0.98865174473791406        // im
          }, { 1.1626371651948837,     // re
            0.986685944207868          // im
          }, { 1.1750230589752761,     // re
            0.98456433452920533        // im
          }, { 1.1873813145857246,     // re
            0.98228725072868872        // im
          }, { 1.1997099805144069,     // re
            0.97985505238424686        // im
          }, { 1.2120071099220546,     // re
            0.97726812356819348        // im
          }, { 1.2242707609493813,     // re
            0.97452687278657713        // im
          }, { 1.2364989970237248,     // re
            0.971631732914674          // im
          }, { 1.2486898871648549,     // re
            0.96858316112863108        // im
          }, { 1.260841506289897,      // re
            0.96538163883327388        // im
          }, { 1.2729519355173253,     // re
            0.96202767158608593        // im
          }, { 1.2850192624699761,     // re
            0.95852178901737584        // im
          }, { 1.2970415815770349,     // re
            0.954864544746643          // im
          }, { 1.3090169943749475,     // re
            0.95105651629515353        // im
          }, { 1.3209436098072094,     // re
            0.94709830499474434        // im
          }, { 1.3328195445229867,     // re
            0.94299053589286441        // im
          }, { 1.3446429231745172,     // re
            0.93873385765387407        // im
          }, { 1.3564118787132506,     // re
            0.934328942456612          // im
          }, { 1.3681245526846779,     // re
            0.92977648588825135        // im
          }, { 1.3797790955218012,     // re
            0.925077206834458          // im
          }, { 1.3913736668372025,     // re
            0.92023184736587038        // im
          }, { 1.4029064357136627,     // re
            0.91524117262091753        // im
          }, { 1.4143755809932841,     // re
            0.91010597068499566        // im
          }, { 1.4257792915650727,     // re
            0.90482705246601958        // im
          }, { 1.4371157666509329,     // re
            0.89940525156637108        // im
          }, { 1.4483832160900323,     // re
            0.89384142415126377        // im
          }, { 1.4595798606214878,     // re
            0.88813644881354448        // im
          }, { 1.4707039321653326,     // re
            0.88229122643495328        // im
          }, { 1.4817536741017152,     // re
            0.87630668004386358        // im
          }, { 1.4927273415482916,     // re
            0.87018375466952569        // im
          }, { 1.5036232016357607,     // re
            0.86392341719283527        // im
          }, { 1.5144395337815064,     // re
            0.85752665619365231        // im
          }, { 1.5251746299612958,     // re
            0.85099448179469184        // im
          }, { 1.5358267949789965,     // re
            0.84432792550201508        // im
          }, { 1.5463943467342691,     // re
            0.83752804004214165        // im
          }, { 1.5568756164881878,     // re
            0.83059589919581267        // im
          }, { 1.5672689491267566,     // re
            0.82353259762842745        // im
          }, { 1.5775727034222675,     // re
            0.81633925071718394        // im
          }, { 1.5877852522924731,     // re
            0.80901699437494745        // im
          }, { 1.5979049830575187,     // re
            0.80156698487087663        // im
          }, { 1.6079302976946055,     // re
            0.79399039864783538        // im
          }, { 1.6178596130903342,     // re
            0.78628843213661892        // im
          }, { 1.6276913612907005,     // re
            0.77846230156702334        // im
          }, { 1.6374239897486897,     // re
            0.77051324277578914        // im
          }, { 1.6470559615694444,     // re
            0.76244251101144789        // im
          }, { 1.6565857557529564,     // re
            0.75425138073610376        // im
          }, { 1.6660118674342517,     // re
            0.74594114542418211        // im
          }, { 1.6753328081210244,     // re
            0.73751311735817393        // im
          }, { 1.6845471059286887,     // re
            0.72896862742141155        // im
          }, { 1.6936533058128049,     // re
            0.72030902488790693        // im
          }, { 1.7026499697988493,     // re
            0.71153567720928534        // im
          }, { 1.7115356772092853,     // re
            0.70264996979884919        // im
          }, { 1.7203090248879069,     // re
            0.69365330581280493        // im
          }, { 1.7289686274214116,     // re
            0.68454710592868873        // im
          }, { 1.7375131173581739,     // re
            0.67533280812102447        // im
          }, { 1.7459411454241822,     // re
            0.66601186743425167        // im
          }, { 1.7542513807361038,     // re
            0.65658575575295652        // im
          }, { 1.7624425110114479,     // re
            0.64705596156944434        // im
          }, { 1.770513242775789,      // re
            0.63742398974868975        // im
          }, { 1.7784623015670233,     // re
            0.62769136129070047        // im
          }, { 1.7862884321366188,     // re
            0.61785961309033433        // im
          }, { 1.7939903986478354,     // re
            0.60793029769460538        // im
          }, { 1.8015669848708766,     // re
            0.59790498305751882        // im
          }, { 1.8090169943749475,     // re
            0.58778525229247314        // im
          }, { 1.8163392507171841,     // re
            0.57757270342226752        // im
          }, { 1.8235325976284273,     // re
            0.56726894912675652        // im
          }, { 1.8305958991958127,     // re
            0.556875616488188          // im
          }, { 1.8375280400421417,     // re
            0.54639434673426912        // im
          }, { 1.8443279255020151,     // re
            0.53582679497899666        // im
          }, { 1.8509944817946917,     // re
            0.52517462996129571        // im
          }, { 1.8575266561936523,     // re
            0.51443953378150642        // im
          }, { 1.8639234171928352,     // re
            0.5036232016357608         // im
          }, { 1.8701837546695257,     // re
            0.49272734154829156        // im
          }, { 1.8763066800438635,     // re
            0.48175367410171532        // im
          }, { 1.8822912264349534,     // re
            0.47070393216533257        // im
          }, { 1.8881364488135444,     // re
            0.45957986062148787        // im
          }, { 1.8938414241512638,     // re
            0.44838321609003223        // im
          }, { 1.8994052515663711,     // re
            0.43711576665093288        // im
          }, { 1.9048270524660196,     // re
            0.42577929156507266        // im
          }, { 1.9101059706849957,     // re
            0.41437558099328414        // im
          }, { 1.9152411726209175,     // re
            0.40290643571366264        // im
          }, { 1.9202318473658704,     // re
            0.39137366683720243        // im
          }, { 1.9250772068344579,     // re
            0.37977909552180111        // im
          }, { 1.9297764858882513,     // re
            0.368124552684678          // im
          }, { 1.9343289424566121,     // re
            0.35641187871325075        // im
          }, { 1.9387338576538742,     // re
            0.34464292317451706        // im
          }, { 1.9429905358928643,     // re
            0.33281954452298668        // im
          }, { 1.9470983049947443,     // re
            0.32094360980720948        // im
          }, { 1.9510565162951536,     // re
            0.3090169943749474         // im
          }, { 1.9548645447466431,     // re
            0.29704158157703492        // im
          }, { 1.9585217890173758,     // re
            0.28501926246997611        // im
          }, { 1.9620276715860858,     // re
            0.27295193551732522        // im
          }, { 1.9653816388332739,     // re
            0.26084150628989694        // im
          }, { 1.9685831611286311,     // re
            0.24868988716485479        // im
          }, { 1.971631732914674,      // re
            0.23649899702372471        // im
          }, { 1.9745268727865772,     // re
            0.22427076094938117        // im
          }, { 1.9772681235681935,     // re
            0.21200710992205465        // im
          }, { 1.9798550523842469,     // re
            0.19970998051440703        // im
          }, { 1.9822872507286888,     // re
            0.18738131458572463        // im
          }, { 1.9845643345292054,     // re
            0.17502305897527606        // im
          }, { 1.9866859442078679,     // re
            0.16263716519488358        // im
          }, { 1.988651744737914,      // re
            0.15022558912075706        // im
          }, { 1.9904614256966511,     // re
            0.13779029068463808        // im
          }, { 1.992114701314478,      // re
            0.12533323356430426        // im
          }, { 1.9936113105200084,     // re
            0.11285638487348168        // im
          }, { 1.9949510169813003,     // re
            0.10036171485121489        // im
          }, { 1.9961336091431725,     // re
            0.08785119655074318        // im
          }, { 1.9971589002606138,     // re
            0.075326805527932722       // im
          }, { 1.9980267284282716,     // re
            0.062790519529313374       // im
          }, { 1.9987369566060176,     // re
            0.050244318179769556       // im
          }, { 1.9992894726405892,     // re
            0.037690182669934541       // im
          }, { 1.9996841892833,        // re
            0.025130095443337479       // im
          }, { 1.9999210442038162,     // re
            0.012566039883352607       // im
          }, { 2.0,                    // re
            0.0                        // im
          }, { 1.9999210442038162,     // re
            -0.012566039883352607      // im
          }, { 1.9996841892833,        // re
            -0.025130095443337479      // im
          }, { 1.9992894726405892,     // re
            -0.037690182669934541      // im
          }, { 1.9987369566060176,     // re
            -0.050244318179769556      // im
          }, { 1.9980267284282716,     // re
            -0.062790519529313374      // im
          }, { 1.9971589002606138,     // re
            -0.075326805527932722      // im
          }, { 1.9961336091431725,     // re
            -0.08785119655074318       // im
          }, { 1.9949510169813003,     // re
            -0.10036171485121489       // im
          }, { 1.9936113105200084,     // re
            -0.11285638487348168       // im
          }, { 1.992114701314478,      // re
            -0.12533323356430426       // im
          }, { 1.9904614256966511,     // re
            -0.13779029068463808       // im
          }, { 1.988651744737914,      // re
            -0.15022558912075706       // im
          }, { 1.9866859442078679,     // re
            -0.16263716519488358       // im
          }, { 1.9845643345292054,     // re
            -0.17502305897527606       // im
          }, { 1.9822872507286888,     // re
            -0.18738131458572463       // im
          }, { 1.9798550523842469,     // re
            -0.19970998051440703       // im
          }, { 1.9772681235681935,     // re
            -0.21200710992205465       // im
          }, { 1.9745268727865772,     // re
            -0.22427076094938117       // im
          }, { 1.971631732914674,      // re
            -0.23649899702372471       // im
          }, { 1.9685831611286311,     // re
            -0.24868988716485479       // im
          }, { 1.9653816388332739,     // re
            -0.26084150628989694       // im
          }, { 1.9620276715860858,     // re
            -0.27295193551732522       // im
          }, { 1.9585217890173758,     // re
            -0.28501926246997611       // im
          }, { 1.9548645447466431,     // re
            -0.29704158157703492       // im
          }, { 1.9510565162951536,     // re
            -0.3090169943749474        // im
          }, { 1.9470983049947443,     // re
            -0.32094360980720948       // im
          }, { 1.9429905358928643,     // re
            -0.33281954452298668       // im
          }, { 1.9387338576538742,     // re
            -0.34464292317451706       // im
          }, { 1.9343289424566121,     // re
            -0.35641187871325075       // im
          }, { 1.9297764858882513,     // re
            -0.368124552684678         // im
          }, { 1.9250772068344579,     // re
            -0.37977909552180111       // im
          }, { 1.9202318473658704,     // re
            -0.39137366683720243       // im
          }, { 1.9152411726209175,     // re
            -0.40290643571366264       // im
          }, { 1.9101059706849957,     // re
            -0.41437558099328414       // im
          }, { 1.9048270524660196,     // re
            -0.42577929156507266       // im
          }, { 1.8994052515663711,     // re
            -0.43711576665093288       // im
          }, { 1.8938414241512638,     // re
            -0.44838321609003223       // im
          }, { 1.8881364488135444,     // re
            -0.45957986062148787       // im
          }, { 1.8822912264349534,     // re
            -0.47070393216533257       // im
          }, { 1.8763066800438635,     // re
            -0.48175367410171532       // im
          }, { 1.8701837546695257,     // re
            -0.49272734154829156       // im
          }, { 1.8639234171928352,     // re
            -0.5036232016357608        // im
          }, { 1.8575266561936523,     // re
            -0.51443953378150642       // im
          }, { 1.8509944817946917,     // re
            -0.52517462996129571       // im
          }, { 1.8443279255020151,     // re
            -0.53582679497899666       // im
          }, { 1.8375280400421417,     // re
            -0.54639434673426912       // im
          }, { 1.8305958991958127,     // re
            -0.556875616488188         // im
          }, { 1.8235325976284273,     // re
            -0.56726894912675652       // im
          }, { 1.8163392507171841,     // re
            -0.57757270342226752       // im
          }, { 1.8090169943749475,     // re
            -0.58778525229247314       // im
          }, { 1.8015669848708766,     // re
            -0.59790498305751882       // im
          }, { 1.7939903986478354,     // re
            -0.60793029769460538       // im
          }, { 1.7862884321366188,     // re
            -0.61785961309033433       // im
          }, { 1.7784623015670233,     // re
            -0.62769136129070047       // im
          }, { 1.770513242775789,      // re
            -0.63742398974868975       // im
          }, { 1.7624425110114479,     // re
            -0.64705596156944434       // im
          }, { 1.7542513807361038,     // re
            -0.65658575575295652       // im
          }, { 1.7459411454241822,     // re
            -0.66601186743425167       // im
          }, { 1.7375131173581739,     // re
            -0.67533280812102447       // im
          }, { 1.7289686274214116,     // re
            -0.68454710592868873       // im
          }, { 1.7203090248879069,     // re
            -0.69365330581280493       // im
          }, { 1.7115356772092853,     // re
            -0.70264996979884919       // im
          }, { 1.7026499697988493,     // re
            -0.71153567720928534       // im
          }, { 1.6936533058128049,     // re
            -0.72030902488790693       // im
          }, { 1.6845471059286887,     // re
            -0.72896862742141155       // im
          }, { 1.6753328081210244,     // re
            -0.73751311735817393       // im
          }, { 1.6660118674342517,     // re
            -0.74594114542418211       // im
          }, { 1.6565857557529564,     // re
            -0.75425138073610376       // im
          }, { 1.6470559615694444,     // re
            -0.76244251101144789       // im
          }, { 1.6374239897486897,     // re
            -0.77051324277578914       // im
          }, { 1.6276913612907005,     // re
            -0.77846230156702334       // im
          }, { 1.6178596130903342,     // re
            -0.78628843213661892       // im
          }, { 1.6079302976946055,     // re
            -0.79399039864783538       // im
          }, { 1.5979049830575187,     // re
            -0.80156698487087663       // im
          }, { 1.5877852522924731,     // re
            -0.80901699437494745       // im
          }, { 1.5775727034222675,     // re
            -0.81633925071718394       // im
          }, { 1.5672689491267566,     // re
            -0.82353259762842745       // im
          }, { 1.5568756164881878,     // re
            -0.83059589919581267       // im
          }, { 1.5463943467342691,     // re
            -0.83752804004214165       // im
          }, { 1.5358267949789965,     // re
            -0.84432792550201508       // im
          }, { 1.5251746299612958,     // re
            -0.85099448179469184       // im
          }, { 1.5144395337815064,     // re
            -0.85752665619365231       // im
          }, { 1.5036232016357607,     // re
            -0.86392341719283527       // im
          }, { 1.4927273415482916,     // re
            -0.87018375466952569       // im
          }, { 1.4817536741017152,     // re
            -0.87630668004386358       // im
          }, { 1.4707039321653326,     // re
            -0.88229122643495328       // im
          }, { 1.4595798606214878,     // re
            -0.88813644881354448       // im
          }, { 1.4483832160900323,     // re
            -0.89384142415126377       // im
          }, { 1.4371157666509329,     // re
            -0.89940525156637108       // im
          }, { 1.4257792915650727,     // re
            -0.90482705246601958       // im
          }, { 1.4143755809932841,     // re
            -0.91010597068499566       // im
          }, { 1.4029064357136627,     // re
            -0.91524117262091753       // im
          }, { 1.3913736668372025,     // re
            -0.92023184736587038       // im
          }, { 1.3797790955218012,     // re
            -0.925077206834458         // im
          }, { 1.3681245526846779,     // re
            -0.92977648588825135       // im
          }, { 1.3564118787132506,     // re
            -0.934328942456612         // im
          }, { 1.3446429231745172,     // re
            -0.93873385765387407       // im
          }, { 1.3328195445229867,     // re
            -0.94299053589286441       // im
          }, { 1.3209436098072094,     // re
            -0.94709830499474434       // im
          }, { 1.3090169943749475,     // re
            -0.95105651629515353       // im
          }, { 1.2970415815770349,     // re
            -0.954864544746643         // im
          }, { 1.2850192624699761,     // re
            -0.95852178901737584       // im
          }, { 1.2729519355173253,     // re
            -0.96202767158608593       // im
          }, { 1.260841506289897,      // re
            -0.96538163883327388       // im
          }, { 1.2486898871648549,     // re
            -0.96858316112863108       // im
          }, { 1.2364989970237248,     // re
            -0.971631732914674         // im
          }, { 1.2242707609493813,     // re
            -0.97452687278657713       // im
          }, { 1.2120071099220546,     // re
            -0.97726812356819348       // im
          }, { 1.1997099805144069,     // re
            -0.97985505238424686       // im
          }, { 1.1873813145857246,     // re
            -0.98228725072868872       // im
          }, { 1.1750230589752761,     // re
            -0.98456433452920533       // im
          }, { 1.1626371651948837,     // re
            -0.986685944207868         // im
          }, { 1.1502255891207571,     // re
            -0.98865174473791406       // im
          }, { 1.137790290684638,      // re
            -0.99046142569665119       // im
          }, { 1.1253332335643043,     // re
            -0.99211470131447788       // im
          }, { 1.1128563848734816,     // re
            -0.9936113105200084        // im
          }, { 1.1003617148512148,     // re
            -0.99495101698130017       // im
          }, { 1.0878511965507431,     // re
            -0.9961336091431725        // im
          }, { 1.0753268055279328,     // re
            -0.99715890026061393       // im
          }, { 1.0627905195293135,     // re
            -0.99802672842827156       // im
          }, { 1.0502443181797696,     // re
            -0.99873695660601747       // im
          }, { 1.0376901826699345,     // re
            -0.9992894726405892        // im
          }, { 1.0251300954433376,     // re
            -0.99968418928329994       // im
          }, { 1.0125660398833527,     // re
            -0.99992104420381611       // im
          } };

        static const double b_dv[513]{ 0.0, -0.0061358846491544753,
          -0.012271538285719925, -0.01840672990580482, -0.024541228522912288,
          -0.030674803176636626, -0.036807222941358832, -0.04293825693494082,
          -0.049067674327418015, -0.055195244349689941, -0.061320736302208578,
          -0.067443919563664051, -0.073564563599667426, -0.079682437971430126,
          -0.0857973123444399, -0.091908956497132724, -0.0980171403295606,
          -0.10412163387205459, -0.11022220729388306, -0.11631863091190475,
          -0.1224106751992162, -0.12849811079379317, -0.13458070850712617,
          -0.14065823933284921, -0.14673047445536175, -0.15279718525844344,
          -0.15885814333386145, -0.16491312048996992, -0.17096188876030122,
          -0.17700422041214875, -0.18303988795514095, -0.18906866414980619,
          -0.19509032201612825, -0.2011046348420919, -0.20711137619221856,
          -0.21311031991609136, -0.2191012401568698, -0.22508391135979283,
          -0.23105810828067111, -0.2370236059943672, -0.24298017990326387,
          -0.24892760574572015, -0.25486565960451457, -0.26079411791527551,
          -0.26671275747489837, -0.272621355449949, -0.27851968938505306,
          -0.28440753721127188, -0.29028467725446233, -0.29615088824362379,
          -0.30200594931922808, -0.30784964004153487, -0.31368174039889152,
          -0.31950203081601569, -0.32531029216226293, -0.33110630575987643,
          -0.33688985339222005, -0.34266071731199438, -0.34841868024943456,
          -0.35416352542049034, -0.35989503653498811, -0.36561299780477385,
          -0.37131719395183749, -0.37700741021641826, -0.38268343236508978,
          -0.38834504669882625, -0.3939920400610481, -0.39962419984564679,
          -0.40524131400498986, -0.41084317105790391, -0.41642956009763715,
          -0.42200027079979968, -0.42755509343028208, -0.43309381885315196,
          -0.43861623853852766, -0.4441221445704292, -0.44961132965460654,
          -0.45508358712634384, -0.46053871095824, -0.46597649576796618,
          -0.47139673682599764, -0.47679923006332209, -0.48218377207912272,
          -0.487550160148436, -0.49289819222978404, -0.49822766697278181,
          -0.50353838372571758, -0.508830142543107, -0.51410274419322166,
          -0.51935599016558964, -0.524589682678469, -0.52980362468629461,
          -0.53499761988709715, -0.54017147272989285, -0.54532498842204646,
          -0.55045797293660481, -0.55557023301960218, -0.560661576197336,
          -0.56573181078361312, -0.57078074588696726, -0.57580819141784534,
          -0.58081395809576453, -0.58579785745643886, -0.59075970185887416,
          -0.59569930449243336, -0.600616479383869, -0.60551104140432555,
          -0.61038280627630948, -0.61523159058062682, -0.6200572117632891,
          -0.62485948814238634, -0.629638238914927, -0.63439328416364549,
          -0.63912444486377573, -0.64383154288979139, -0.64851440102211244,
          -0.65317284295377676, -0.65780669329707864, -0.66241577759017178,
          -0.66699992230363747, -0.67155895484701833, -0.67609270357531592,
          -0.680600997795453, -0.68508366777270036, -0.68954054473706683,
          -0.69397146088965389, -0.69837624940897292, -0.7027547444572253,
          -0.70710678118654757, -0.71143219574521643, -0.71573082528381859,
          -0.72000250796138165, -0.724247082951467, -0.7284643904482252,
          -0.73265427167241282, -0.73681656887736979, -0.74095112535495922,
          -0.745057785441466, -0.74913639452345937, -0.75318679904361252,
          -0.75720884650648457, -0.76120238548426178, -0.765167265622459,
          -0.7691033376455797, -0.773010453362737, -0.77688846567323244,
          -0.78073722857209449, -0.78455659715557524, -0.78834642762660634,
          -0.79210657730021239, -0.79583690460888357, -0.799537269107905,
          -0.80320753148064494, -0.80684755354379933, -0.81045719825259477,
          -0.81403632970594841, -0.81758481315158371, -0.82110251499110465,
          -0.82458930278502529, -0.8280450452577558, -0.83146961230254524,
          -0.83486287498638, -0.83822470555483808, -0.84155497743689844,
          -0.84485356524970712, -0.84812034480329723, -0.8513551931052652,
          -0.85455798836540053, -0.85772861000027212, -0.86086693863776731,
          -0.8639728561215867, -0.86704624551569265, -0.87008699110871146,
          -0.87309497841829009, -0.8760700941954066, -0.87901222642863353,
          -0.881921264348355, -0.88479709843093779, -0.88763962040285393,
          -0.89044872324475788, -0.89322430119551532, -0.89596624975618522,
          -0.89867446569395382, -0.901348847046022, -0.90398929312344334,
          -0.90659570451491533, -0.90916798309052238, -0.91170603200542988,
          -0.91420975570353069, -0.9166790599210427, -0.91911385169005777,
          -0.9215140393420419, -0.92387953251128674, -0.92621024213831138,
          -0.92850608047321559, -0.93076696107898371, -0.932992798834739,
          -0.93518350993894761, -0.937339011912575, -0.93945922360218992,
          -0.94154406518302081, -0.94359345816196039, -0.94560732538052128,
          -0.94758559101774109, -0.94952818059303667, -0.95143502096900834,
          -0.95330604035419386, -0.95514116830577078, -0.95694033573220882,
          -0.9587034748958716, -0.96043051941556579, -0.96212140426904158,
          -0.96377606579543984, -0.9653944416976894, -0.96697647104485207,
          -0.96852209427441727, -0.970031253194544, -0.97150389098625178,
          -0.97293995220556018, -0.97433938278557586, -0.97570213003852857,
          -0.97702814265775439, -0.97831737071962765, -0.97956976568544052,
          -0.98078528040323043, -0.98196386910955524, -0.98310548743121629,
          -0.984210092386929, -0.98527764238894122, -0.98630809724459867,
          -0.98730141815785843, -0.98825756773074946, -0.989176509964781,
          -0.99005821026229712, -0.99090263542778, -0.99170975366909953,
          -0.99247953459871, -0.9932119492347945, -0.99390697000235606,
          -0.99456457073425542, -0.99518472667219693, -0.99576741446765982,
          -0.996312612182778, -0.99682029929116567, -0.99729045667869021,
          -0.99772306664419164, -0.99811811290014918, -0.99847558057329477,
          -0.99879545620517241, -0.99907772775264536, -0.99932238458834954,
          -0.99952941750109314, -0.99969881869620425, -0.9998305817958234,
          -0.9999247018391445, -0.99998117528260111, -1.0, -0.99998117528260111,
          -0.9999247018391445, -0.9998305817958234, -0.99969881869620425,
          -0.99952941750109314, -0.99932238458834954, -0.99907772775264536,
          -0.99879545620517241, -0.99847558057329477, -0.99811811290014918,
          -0.99772306664419164, -0.99729045667869021, -0.99682029929116567,
          -0.996312612182778, -0.99576741446765982, -0.99518472667219693,
          -0.99456457073425542, -0.99390697000235606, -0.9932119492347945,
          -0.99247953459871, -0.99170975366909953, -0.99090263542778,
          -0.99005821026229712, -0.989176509964781, -0.98825756773074946,
          -0.98730141815785843, -0.98630809724459867, -0.98527764238894122,
          -0.984210092386929, -0.98310548743121629, -0.98196386910955524,
          -0.98078528040323043, -0.97956976568544052, -0.97831737071962765,
          -0.97702814265775439, -0.97570213003852857, -0.97433938278557586,
          -0.97293995220556018, -0.97150389098625178, -0.970031253194544,
          -0.96852209427441727, -0.96697647104485207, -0.9653944416976894,
          -0.96377606579543984, -0.96212140426904158, -0.96043051941556579,
          -0.9587034748958716, -0.95694033573220882, -0.95514116830577078,
          -0.95330604035419386, -0.95143502096900834, -0.94952818059303667,
          -0.94758559101774109, -0.94560732538052128, -0.94359345816196039,
          -0.94154406518302081, -0.93945922360218992, -0.937339011912575,
          -0.93518350993894761, -0.932992798834739, -0.93076696107898371,
          -0.92850608047321559, -0.92621024213831138, -0.92387953251128674,
          -0.9215140393420419, -0.91911385169005777, -0.9166790599210427,
          -0.91420975570353069, -0.91170603200542988, -0.90916798309052238,
          -0.90659570451491533, -0.90398929312344334, -0.901348847046022,
          -0.89867446569395382, -0.89596624975618522, -0.89322430119551532,
          -0.89044872324475788, -0.88763962040285393, -0.88479709843093779,
          -0.881921264348355, -0.87901222642863353, -0.8760700941954066,
          -0.87309497841829009, -0.87008699110871146, -0.86704624551569265,
          -0.8639728561215867, -0.86086693863776731, -0.85772861000027212,
          -0.85455798836540053, -0.8513551931052652, -0.84812034480329723,
          -0.84485356524970712, -0.84155497743689844, -0.83822470555483808,
          -0.83486287498638, -0.83146961230254524, -0.8280450452577558,
          -0.82458930278502529, -0.82110251499110465, -0.81758481315158371,
          -0.81403632970594841, -0.81045719825259477, -0.80684755354379933,
          -0.80320753148064494, -0.799537269107905, -0.79583690460888357,
          -0.79210657730021239, -0.78834642762660634, -0.78455659715557524,
          -0.78073722857209449, -0.77688846567323244, -0.773010453362737,
          -0.7691033376455797, -0.765167265622459, -0.76120238548426178,
          -0.75720884650648457, -0.75318679904361252, -0.74913639452345937,
          -0.745057785441466, -0.74095112535495922, -0.73681656887736979,
          -0.73265427167241282, -0.7284643904482252, -0.724247082951467,
          -0.72000250796138165, -0.71573082528381859, -0.71143219574521643,
          -0.70710678118654757, -0.7027547444572253, -0.69837624940897292,
          -0.69397146088965389, -0.68954054473706683, -0.68508366777270036,
          -0.680600997795453, -0.67609270357531592, -0.67155895484701833,
          -0.66699992230363747, -0.66241577759017178, -0.65780669329707864,
          -0.65317284295377676, -0.64851440102211244, -0.64383154288979139,
          -0.63912444486377573, -0.63439328416364549, -0.629638238914927,
          -0.62485948814238634, -0.6200572117632891, -0.61523159058062682,
          -0.61038280627630948, -0.60551104140432555, -0.600616479383869,
          -0.59569930449243336, -0.59075970185887416, -0.58579785745643886,
          -0.58081395809576453, -0.57580819141784534, -0.57078074588696726,
          -0.56573181078361312, -0.560661576197336, -0.55557023301960218,
          -0.55045797293660481, -0.54532498842204646, -0.54017147272989285,
          -0.53499761988709715, -0.52980362468629461, -0.524589682678469,
          -0.51935599016558964, -0.51410274419322166, -0.508830142543107,
          -0.50353838372571758, -0.49822766697278181, -0.49289819222978404,
          -0.487550160148436, -0.48218377207912272, -0.47679923006332209,
          -0.47139673682599764, -0.46597649576796618, -0.46053871095824,
          -0.45508358712634384, -0.44961132965460654, -0.4441221445704292,
          -0.43861623853852766, -0.43309381885315196, -0.42755509343028208,
          -0.42200027079979968, -0.41642956009763715, -0.41084317105790391,
          -0.40524131400498986, -0.39962419984564679, -0.3939920400610481,
          -0.38834504669882625, -0.38268343236508978, -0.37700741021641826,
          -0.37131719395183749, -0.36561299780477385, -0.35989503653498811,
          -0.35416352542049034, -0.34841868024943456, -0.34266071731199438,
          -0.33688985339222005, -0.33110630575987643, -0.32531029216226293,
          -0.31950203081601569, -0.31368174039889152, -0.30784964004153487,
          -0.30200594931922808, -0.29615088824362379, -0.29028467725446233,
          -0.28440753721127188, -0.27851968938505306, -0.272621355449949,
          -0.26671275747489837, -0.26079411791527551, -0.25486565960451457,
          -0.24892760574572015, -0.24298017990326387, -0.2370236059943672,
          -0.23105810828067111, -0.22508391135979283, -0.2191012401568698,
          -0.21311031991609136, -0.20711137619221856, -0.2011046348420919,
          -0.19509032201612825, -0.18906866414980619, -0.18303988795514095,
          -0.17700422041214875, -0.17096188876030122, -0.16491312048996992,
          -0.15885814333386145, -0.15279718525844344, -0.14673047445536175,
          -0.14065823933284921, -0.13458070850712617, -0.12849811079379317,
          -0.1224106751992162, -0.11631863091190475, -0.11022220729388306,
          -0.10412163387205459, -0.0980171403295606, -0.091908956497132724,
          -0.0857973123444399, -0.079682437971430126, -0.073564563599667426,
          -0.067443919563664051, -0.061320736302208578, -0.055195244349689941,
          -0.049067674327418015, -0.04293825693494082, -0.036807222941358832,
          -0.030674803176636626, -0.024541228522912288, -0.01840672990580482,
          -0.012271538285719925, -0.0061358846491544753, -0.0 };

        static const unsigned char uv[250]{ 1U, 250U, 249U, 248U, 247U, 246U,
          245U, 244U, 243U, 242U, 241U, 240U, 239U, 238U, 237U, 236U, 235U, 234U,
          233U, 232U, 231U, 230U, 229U, 228U, 227U, 226U, 225U, 224U, 223U, 222U,
          221U, 220U, 219U, 218U, 217U, 216U, 215U, 214U, 213U, 212U, 211U, 210U,
          209U, 208U, 207U, 206U, 205U, 204U, 203U, 202U, 201U, 200U, 199U, 198U,
          197U, 196U, 195U, 194U, 193U, 192U, 191U, 190U, 189U, 188U, 187U, 186U,
          185U, 184U, 183U, 182U, 181U, 180U, 179U, 178U, 177U, 176U, 175U, 174U,
          173U, 172U, 171U, 170U, 169U, 168U, 167U, 166U, 165U, 164U, 163U, 162U,
          161U, 160U, 159U, 158U, 157U, 156U, 155U, 154U, 153U, 152U, 151U, 150U,
          149U, 148U, 147U, 146U, 145U, 144U, 143U, 142U, 141U, 140U, 139U, 138U,
          137U, 136U, 135U, 134U, 133U, 132U, 131U, 130U, 129U, 128U, 127U, 126U,
          125U, 124U, 123U, 122U, 121U, 120U, 119U, 118U, 117U, 116U, 115U, 114U,
          113U, 112U, 111U, 110U, 109U, 108U, 107U, 106U, 105U, 104U, 103U, 102U,
          101U, 100U, 99U, 98U, 97U, 96U, 95U, 94U, 93U, 92U, 91U, 90U, 89U, 88U,
          87U, 86U, 85U, 84U, 83U, 82U, 81U, 80U, 79U, 78U, 77U, 76U, 75U, 74U,
          73U, 72U, 71U, 70U, 69U, 68U, 67U, 66U, 65U, 64U, 63U, 62U, 61U, 60U,
          59U, 58U, 57U, 56U, 55U, 54U, 53U, 52U, 51U, 50U, 49U, 48U, 47U, 46U,
          45U, 44U, 43U, 42U, 41U, 40U, 39U, 38U, 37U, 36U, 35U, 34U, 33U, 32U,
          31U, 30U, 29U, 28U, 27U, 26U, 25U, 24U, 23U, 22U, 21U, 20U, 19U, 18U,
          17U, 16U, 15U, 14U, 13U, 12U, 11U, 10U, 9U, 8U, 7U, 6U, 5U, 4U, 3U, 2U
        };

        creal_T fv[512];
        creal_T fy[512];
        creal_T ytmp[250];
        double hcostab[256];
        double hcostabinv[256];
        double hsintab[256];
        double hsintabinv[256];
        double b_temp_re_tmp;
        double temp_im;
        double temp_re;
        double twid_im;
        double twid_re;
        double ytmp_re_tmp;
        int i;
        int iheight;
        int ihi;
        int istart;
        int iy;
        int ju;
        int k;
        int temp_re_tmp;
        bool tst;
        for (i = 0; i < 256; i++) {
          iy = ((i + 1) << 1) - 2;
          hcostab[i] = dv[iy];
          hsintab[i] = b_dv[iy];
          hcostabinv[i] = costabinv[iy];
          hsintabinv[i] = sintabinv[iy];
        }

        for (iy = 0; iy < 250; iy++) {
          temp_re_tmp = iy << 1;
          temp_re = x[temp_re_tmp];
          temp_im = x[temp_re_tmp + 1];
          ytmp_re_tmp = wwc[iy + 249].re;
          twid_re = wwc[iy + 249].im;
          ytmp[iy].re = ytmp_re_tmp * temp_re + twid_re * temp_im;
          ytmp[iy].im = ytmp_re_tmp * temp_im - twid_re * temp_re;
        }

        std::memset(&fy[0], 0, 512U * sizeof(creal_T));
        iy = 0;
        ju = 0;
        for (i = 0; i < 249; i++) {
          fy[iy] = ytmp[i];
          iy = 512;
          tst = true;
          while (tst) {
            iy >>= 1;
            ju ^= iy;
            tst = ((ju & iy) == 0);
          }

          iy = ju;
        }

        fy[iy] = ytmp[249];
        for (i = 0; i <= 510; i += 2) {
          b_temp_re_tmp = fy[i + 1].re;
          ytmp_re_tmp = fy[i + 1].im;
          temp_im = ytmp_re_tmp;
          temp_re = fy[i].re;
          twid_im = fy[i].im;
          fy[i + 1].re = temp_re - b_temp_re_tmp;
          ytmp_re_tmp = twid_im - ytmp_re_tmp;
          fy[i + 1].im = ytmp_re_tmp;
          fy[i].re = temp_re + b_temp_re_tmp;
          fy[i].im = twid_im + temp_im;
        }

        iy = 2;
        ju = 4;
        k = 128;
        iheight = 509;
        while (k > 0) {
          for (i = 0; i < iheight; i += ju) {
            temp_re_tmp = i + iy;
            temp_re = fy[temp_re_tmp].re;
            temp_im = fy[temp_re_tmp].im;
            fy[temp_re_tmp].re = fy[i].re - temp_re;
            fy[temp_re_tmp].im = fy[i].im - temp_im;
            fy[i].re += temp_re;
            fy[i].im += temp_im;
          }

          istart = 1;
          for (int j{k}; j < 256; j += k) {
            twid_re = hcostab[j];
            twid_im = hsintab[j];
            i = istart;
            ihi = istart + iheight;
            while (i < ihi) {
              temp_re_tmp = i + iy;
              b_temp_re_tmp = fy[temp_re_tmp].im;
              temp_im = fy[temp_re_tmp].re;
              temp_re = twid_re * temp_im - twid_im * b_temp_re_tmp;
              temp_im = twid_re * b_temp_re_tmp + twid_im * temp_im;
              fy[temp_re_tmp].re = fy[i].re - temp_re;
              fy[temp_re_tmp].im = fy[i].im - temp_im;
              fy[i].re += temp_re;
              fy[i].im += temp_im;
              i += ju;
            }

            istart++;
          }

          k /= 2;
          iy = ju;
          ju += ju;
          iheight -= iy;
        }

        std::memset(&fv[0], 0, 512U * sizeof(creal_T));
        iy = 0;
        ju = 0;
        for (i = 0; i < 498; i++) {
          fv[iy] = wwc[i];
          iy = 512;
          tst = true;
          while (tst) {
            iy >>= 1;
            ju ^= iy;
            tst = ((ju & iy) == 0);
          }

          iy = ju;
        }

        fv[iy] = wwc[498];
        for (i = 0; i <= 510; i += 2) {
          b_temp_re_tmp = fv[i + 1].re;
          ytmp_re_tmp = fv[i + 1].im;
          temp_im = ytmp_re_tmp;
          temp_re = fv[i].re;
          twid_im = fv[i].im;
          fv[i + 1].re = temp_re - b_temp_re_tmp;
          ytmp_re_tmp = twid_im - ytmp_re_tmp;
          fv[i + 1].im = ytmp_re_tmp;
          fv[i].re = temp_re + b_temp_re_tmp;
          fv[i].im = twid_im + temp_im;
        }

        iy = 2;
        ju = 4;
        k = 128;
        iheight = 509;
        while (k > 0) {
          for (i = 0; i < iheight; i += ju) {
            temp_re_tmp = i + iy;
            temp_re = fv[temp_re_tmp].re;
            temp_im = fv[temp_re_tmp].im;
            fv[temp_re_tmp].re = fv[i].re - temp_re;
            fv[temp_re_tmp].im = fv[i].im - temp_im;
            fv[i].re += temp_re;
            fv[i].im += temp_im;
          }

          istart = 1;
          for (int j{k}; j < 256; j += k) {
            twid_re = hcostab[j];
            twid_im = hsintab[j];
            i = istart;
            ihi = istart + iheight;
            while (i < ihi) {
              temp_re_tmp = i + iy;
              b_temp_re_tmp = fv[temp_re_tmp].im;
              temp_im = fv[temp_re_tmp].re;
              temp_re = twid_re * temp_im - twid_im * b_temp_re_tmp;
              temp_im = twid_re * b_temp_re_tmp + twid_im * temp_im;
              fv[temp_re_tmp].re = fv[i].re - temp_re;
              fv[temp_re_tmp].im = fv[i].im - temp_im;
              fv[i].re += temp_re;
              fv[i].im += temp_im;
              i += ju;
            }

            istart++;
          }

          k /= 2;
          iy = ju;
          ju += ju;
          iheight -= iy;
        }

        for (iy = 0; iy < 512; iy++) {
          temp_re = fy[iy].re;
          twid_im = fv[iy].im;
          temp_im = fy[iy].im;
          twid_re = fv[iy].re;
          fy[iy].re = temp_re * twid_re - temp_im * twid_im;
          fy[iy].im = temp_re * twid_im + temp_im * twid_re;
        }

        iy = 0;
        ju = 0;
        for (i = 0; i < 511; i++) {
          fv[iy] = fy[i];
          iy = 512;
          tst = true;
          while (tst) {
            iy >>= 1;
            ju ^= iy;
            tst = ((ju & iy) == 0);
          }

          iy = ju;
        }

        fv[iy] = fy[511];
        for (i = 0; i <= 510; i += 2) {
          b_temp_re_tmp = fv[i + 1].re;
          ytmp_re_tmp = fv[i + 1].im;
          temp_im = ytmp_re_tmp;
          temp_re = fv[i].re;
          twid_im = fv[i].im;
          fv[i + 1].re = temp_re - b_temp_re_tmp;
          ytmp_re_tmp = twid_im - ytmp_re_tmp;
          fv[i + 1].im = ytmp_re_tmp;
          fv[i].re = temp_re + b_temp_re_tmp;
          fv[i].im = twid_im + temp_im;
        }

        iy = 2;
        ju = 4;
        k = 128;
        iheight = 509;
        while (k > 0) {
          for (i = 0; i < iheight; i += ju) {
            temp_re_tmp = i + iy;
            temp_re = fv[temp_re_tmp].re;
            temp_im = fv[temp_re_tmp].im;
            fv[temp_re_tmp].re = fv[i].re - temp_re;
            fv[temp_re_tmp].im = fv[i].im - temp_im;
            fv[i].re += temp_re;
            fv[i].im += temp_im;
          }

          istart = 1;
          for (int j{k}; j < 256; j += k) {
            twid_re = hcostabinv[j];
            twid_im = hsintabinv[j];
            i = istart;
            ihi = istart + iheight;
            while (i < ihi) {
              temp_re_tmp = i + iy;
              b_temp_re_tmp = fv[temp_re_tmp].im;
              temp_im = fv[temp_re_tmp].re;
              temp_re = twid_re * temp_im - twid_im * b_temp_re_tmp;
              temp_im = twid_re * b_temp_re_tmp + twid_im * temp_im;
              fv[temp_re_tmp].re = fv[i].re - temp_re;
              fv[temp_re_tmp].im = fv[i].im - temp_im;
              fv[i].re += temp_re;
              fv[i].im += temp_im;
              i += ju;
            }

            istart++;
          }

          k /= 2;
          iy = ju;
          ju += ju;
          iheight -= iy;
        }

        for (iy = 0; iy < 512; iy++) {
          fv[iy].re *= 0.001953125;
          fv[iy].im *= 0.001953125;
        }

        for (k = 0; k < 250; k++) {
          ytmp_re_tmp = wwc[k + 249].re;
          twid_re = fv[k + 249].im;
          twid_im = wwc[k + 249].im;
          temp_im = fv[k + 249].re;
          ytmp[k].re = ytmp_re_tmp * temp_im + twid_im * twid_re;
          ytmp[k].im = ytmp_re_tmp * twid_re - twid_im * temp_im;
        }

        for (i = 0; i < 250; i++) {
          double b_ytmp_re_tmp;
          double c_ytmp_re_tmp;
          temp_im = ytmp[i].re;
          twid_re = reconVar1[i].im;
          twid_im = ytmp[i].im;
          temp_re = reconVar1[i].re;
          iy = uv[i] - 1;
          ytmp_re_tmp = ytmp[iy].re;
          b_temp_re_tmp = -ytmp[iy].im;
          b_ytmp_re_tmp = reconVar2[i].im;
          c_ytmp_re_tmp = reconVar2[i].re;
          y[i].re = 0.5 * ((temp_im * temp_re - twid_im * twid_re) +
                           (ytmp_re_tmp * c_ytmp_re_tmp - b_temp_re_tmp *
                            b_ytmp_re_tmp));
          y[i].im = 0.5 * ((temp_im * twid_re + twid_im * temp_re) +
                           (ytmp_re_tmp * b_ytmp_re_tmp + b_temp_re_tmp *
                            c_ytmp_re_tmp));
          y[i + 250].re = 0.5 * ((temp_im * c_ytmp_re_tmp - twid_im *
            b_ytmp_re_tmp) + (ytmp_re_tmp * temp_re - b_temp_re_tmp * twid_re));
          y[i + 250].im = 0.5 * ((temp_im * b_ytmp_re_tmp + twid_im *
            c_ytmp_re_tmp) + (ytmp_re_tmp * twid_re + b_temp_re_tmp * temp_re));
        }
      }
    }
  }
}

static int MultiWord2sLong(const unsigned int u[])
{
  return static_cast<int>(u[0]);
}

static void MultiWordAdd(const unsigned int u1[], const unsigned int u2[],
  unsigned int y[])
{
  int carry{ 0 };

  for (int i{0}; i < 2; i++) {
    unsigned int u1i;
    unsigned int yi;
    u1i = u1[i];
    yi = (u1i + u2[i]) + static_cast<unsigned int>(carry);
    y[i] = yi;
    if (carry != 0) {
      carry = (yi <= u1i);
    } else {
      carry = (yi < u1i);
    }
  }
}

static void MultiWordNeg(const unsigned int u1[], unsigned int y[])
{
  int carry{ 1 };

  for (int i{0}; i < 2; i++) {
    unsigned int yi;
    yi = ~u1[i] + static_cast<unsigned int>(carry);
    y[i] = yi;
    carry = (yi < static_cast<unsigned int>(carry));
  }
}

static void MultiWordSetUnsignedMax(unsigned int y[])
{
  for (int i{0}; i < 2; i++) {
    y[i] = MAX_uint32_T;
  }
}

static void MultiWordSub(const unsigned int u1[], const unsigned int u2[],
  unsigned int y[], int n)
{
  int borrow{ 0 };

  for (int i{0}; i < n; i++) {
    unsigned int u1i;
    unsigned int yi;
    u1i = u1[i];
    yi = (u1i - u2[i]) - static_cast<unsigned int>(borrow);
    y[i] = yi;
    if (borrow != 0) {
      borrow = (yi >= u1i);
    } else {
      borrow = (yi > u1i);
    }
  }
}

namespace coder
{
  static void b_abs(const array<double, 2U> &x, array<double, 2U> &y)
  {
    int nx_tmp;
    nx_tmp = x.size(1);
    y.set_size(1, x.size(1));
    for (int k{0}; k < nx_tmp; k++) {
      y[k] = std::abs(x[k]);
    }
  }

  static void b_findpeaks(const double Yin[500], double Ypk_data[], int
    Ypk_size[2], double Xpk_data[], int Xpk_size[2])
  {
    array<int, 2U> y;
    array<int, 1U> b_fPk_data;
    array<int, 1U> b_iInfinite_data;
    array<int, 1U> c;
    array<int, 1U> ia;
    array<int, 1U> ib;
    double ykfirst;
    int idx_data[1000];
    int fPk_data[500];
    int iInfinite_data[500];
    int i;
    int kfirst;
    int nInf;
    int nPk;
    short iFinite_data[500];
    char dir;
    bool isinfykfirst;
    nPk = -1;
    nInf = -1;
    dir = 'n';
    kfirst = -1;
    ykfirst = rtInf;
    isinfykfirst = true;
    for (int k{0}; k < 500; k++) {
      double yk;
      bool isinfyk;
      yk = Yin[k];
      if (std::isnan(yk)) {
        yk = rtInf;
        isinfyk = true;
      } else if (std::isinf(yk) && (yk > 0.0)) {
        isinfyk = true;
        nInf++;
        iInfinite_data[nInf] = k + 1;
      } else {
        isinfyk = false;
      }

      if (yk != ykfirst) {
        char previousdir;
        previousdir = dir;
        if (isinfyk || isinfykfirst) {
          dir = 'n';
        } else if (yk < ykfirst) {
          dir = 'd';
          if (previousdir == 'i') {
            nPk++;
            iFinite_data[nPk] = static_cast<short>(kfirst + 1);
          }
        } else {
          dir = 'i';
        }

        ykfirst = yk;
        kfirst = k;
        isinfykfirst = isinfyk;
      }
    }

    if (nPk + 1 < 1) {
      nPk = -1;
    }

    i = nPk + 1;
    if (nInf + 1 < 1) {
      nInf = -1;
    }

    nInf++;
    nPk = 0;
    for (int k{0}; k < i; k++) {
      short i1;
      i1 = iFinite_data[k];
      ykfirst = Yin[i1 - 1];
      if ((ykfirst > rtMinusInf) && (ykfirst - std::fmax(Yin[i1 - 2], Yin[i1]) >=
           0.0)) {
        nPk++;
        fPk_data[nPk - 1] = i1;
      }
    }

    if (nPk < 1) {
      kfirst = 0;
    } else {
      kfirst = nPk;
    }

    b_fPk_data.set(&fPk_data[0], kfirst);
    b_iInfinite_data.set(&iInfinite_data[0], nInf);
    do_vectors(b_fPk_data, b_iInfinite_data, c, ia, ib);
    nInf = c.size(0);
    y.set_size(1, c.size(0));
    if (c.size(0) > 0) {
      y[0] = 1;
      kfirst = 1;
      for (int k{2}; k <= nInf; k++) {
        kfirst++;
        y[k - 1] = kfirst;
      }
    }

    kfirst = c.size(0);
    for (i = 0; i < nInf; i++) {
      idx_data[i] = y[i];
    }

    if (kfirst > 500) {
      kfirst = 500;
    } else {
      kfirst = c.size(0);
    }

    for (i = 0; i < kfirst; i++) {
      fPk_data[i] = c[idx_data[i] - 1];
    }

    Ypk_size[0] = 1;
    Ypk_size[1] = kfirst;
    Xpk_size[0] = 1;
    Xpk_size[1] = kfirst;
    for (i = 0; i < kfirst; i++) {
      Ypk_data[i] = Yin[fPk_data[i] - 1];
      Xpk_data[i] = static_cast<short>(static_cast<short>(fPk_data[i] - 1) + 1);
    }
  }

  static double combineVectorElements(const array<double, 2U> &x)
  {
    double y;
    if (x.size(1) == 0) {
      y = 0.0;
    } else {
      int firstBlockLength;
      int lastBlockLength;
      int nblocks;
      if (x.size(1) <= 1024) {
        firstBlockLength = x.size(1);
        lastBlockLength = 0;
        nblocks = 1;
      } else {
        firstBlockLength = 1024;
        nblocks = static_cast<int>(static_cast<unsigned int>(x.size(1)) >> 10);
        lastBlockLength = x.size(1) - (nblocks << 10);
        if (lastBlockLength > 0) {
          nblocks++;
        } else {
          lastBlockLength = 1024;
        }
      }

      y = x[0];
      for (int k{2}; k <= firstBlockLength; k++) {
        y += x[k - 1];
      }

      for (int ib{2}; ib <= nblocks; ib++) {
        double bsum;
        int hi;
        firstBlockLength = (ib - 1) << 10;
        bsum = x[firstBlockLength];
        if (ib == nblocks) {
          hi = lastBlockLength;
        } else {
          hi = 1024;
        }

        for (int k{2}; k <= hi; k++) {
          bsum += x[(firstBlockLength + k) - 1];
        }

        y += bsum;
      }
    }

    return y;
  }

  static void detrend(const array<double, 2U> &x, array<double, 2U> &y)
  {
    array<double, 2U> A;
    array<double, 2U> W;
    array<double, 1U> a;
    array<double, 1U> b_y1;
    array<double, 1U> sOriginalType;
    array<int, 2U> b_y;
    double tau_data[2];
    int i;
    int loop_ub;
    int maxmn;
    int n_tmp;
    int yk;
    loop_ub = x.size(1);
    b_y1.set_size(x.size(1));
    for (i = 0; i < loop_ub; i++) {
      b_y1[i] = x[i];
    }

    if (b_y1.size(0) - 1 < 0) {
      n_tmp = 0;
    } else {
      n_tmp = b_y1.size(0);
    }

    b_y.set_size(1, n_tmp);
    if (n_tmp > 0) {
      b_y[0] = 0;
      yk = 0;
      for (maxmn = 2; maxmn <= n_tmp; maxmn++) {
        yk++;
        b_y[maxmn - 1] = yk;
      }
    }

    sOriginalType.set_size(n_tmp);
    for (i = 0; i < n_tmp; i++) {
      sOriginalType[i] = b_y[i];
    }

    if (b_y1.size(0) != 0) {
      if (b_y1.size(0) == 1) {
        b_y1[0] = b_y1[0] * 0.0;
      } else {
        double p[2];
        double tol;
        int jpvt[2];
        int rr;
        a.set_size(n_tmp);
        for (int b_i{0}; b_i < n_tmp; b_i++) {
          a[b_i] = sOriginalType[b_i] - sOriginalType[0];
        }

        for (i = 0; i < n_tmp; i++) {
          a[i] = a[i] / sOriginalType[sOriginalType.size(0) - 1];
        }

        W.set_size(n_tmp, 2);
        for (int b_i{0}; b_i < n_tmp; b_i++) {
          tol = a[b_i];
          tol = std::fmax(tol, 0.0);
          a[b_i] = tol;
          W[b_i] = tol;
          W[b_i + W.size(0)] = 1.0;
        }

        A.set_size(n_tmp, 2);
        yk = W.size(0) << 1;
        for (i = 0; i < yk; i++) {
          A[i] = W[i];
        }

        internal::lapack::xgeqp3(A, tau_data, jpvt);
        rr = 0;
        if (A.size(0) < 2) {
          yk = A.size(0);
          maxmn = 2;
        } else {
          yk = 2;
          maxmn = A.size(0);
        }

        if (yk > 0) {
          tol = std::fmin(1.4901161193847656E-8, 2.2204460492503131E-15 *
                          static_cast<double>(maxmn)) * std::abs(A[0]);
          while ((rr < yk) && (!(std::abs(A[rr + A.size(0) * rr]) <= tol))) {
            rr++;
          }
        }

        sOriginalType.set_size(x.size(1));
        for (i = 0; i < loop_ub; i++) {
          sOriginalType[i] = b_y1[i];
        }

        p[0] = 0.0;
        p[1] = 0.0;
        yk = A.size(0);
        if (yk > 2) {
          yk = 2;
        }

        for (int j{0}; j < yk; j++) {
          maxmn = A.size(0);
          if (tau_data[j] != 0.0) {
            tol = sOriginalType[j];
            i = j + 2;
            for (int b_i{i}; b_i <= maxmn; b_i++) {
              tol += A[(b_i + A.size(0) * j) - 1] * sOriginalType[b_i - 1];
            }

            tol *= tau_data[j];
            if (tol != 0.0) {
              sOriginalType[j] = sOriginalType[j] - tol;
              for (int b_i{i}; b_i <= maxmn; b_i++) {
                sOriginalType[b_i - 1] = sOriginalType[b_i - 1] - A[(b_i +
                  A.size(0) * j) - 1] * tol;
              }
            }
          }
        }

        for (int b_i{0}; b_i < rr; b_i++) {
          p[jpvt[b_i] - 1] = sOriginalType[b_i];
        }

        for (int j{rr}; j >= 1; j--) {
          yk = jpvt[j - 1] - 1;
          p[yk] /= A[(j + A.size(0) * (j - 1)) - 1];
          for (int b_i{0}; b_i <= j - 2; b_i++) {
            p[jpvt[0] - 1] -= p[yk] * A[A.size(0) * (j - 1)];
          }
        }

        sOriginalType.set_size(n_tmp);
        for (int b_i{0}; b_i < n_tmp; b_i++) {
          sOriginalType[b_i] = W[b_i] * p[0] + W[W.size(0) + b_i] * p[1];
        }

        if (b_y1.size(0) == sOriginalType.size(0)) {
          for (i = 0; i < loop_ub; i++) {
            b_y1[i] = b_y1[i] - sOriginalType[i];
          }
        } else {
          minus(b_y1, sOriginalType);
        }
      }
    }

    loop_ub = b_y1.size(0);
    y.set_size(1, b_y1.size(0));
    for (i = 0; i < loop_ub; i++) {
      y[i] = b_y1[i];
    }
  }

  static void do_vectors(const array<int, 1U> &a, const array<int, 1U> &b, array<
    int, 1U> &c, array<int, 1U> &ia, array<int, 1U> &ib)
  {
    int b_ialast;
    int b_iblast;
    int i;
    int iafirst;
    int ialast;
    int ibfirst;
    int iblast;
    int nb_tmp;
    int nc;
    int ncmax;
    int nia;
    int nib;
    i = a.size(0);
    nb_tmp = b.size(0);
    ncmax = a.size(0) + b.size(0);
    c.set_size(ncmax);
    ia.set_size(a.size(0));
    ib.set_size(b.size(0));
    nc = -1;
    nia = -1;
    nib = 0;
    iafirst = 1;
    ialast = 0;
    ibfirst = 0;
    iblast = 0;
    while ((ialast + 1 <= i) && (iblast + 1 <= nb_tmp)) {
      int ak;
      int bk;
      b_ialast = ialast + 1;
      ak = a[ialast];
      while ((b_ialast < a.size(0)) && (a[b_ialast] == ak)) {
        b_ialast++;
      }

      ialast = b_ialast - 1;
      b_iblast = iblast + 1;
      bk = b[iblast];
      while ((b_iblast < b.size(0)) && (b[b_iblast] == bk)) {
        b_iblast++;
      }

      iblast = b_iblast - 1;
      if (ak == bk) {
        nc++;
        c[nc] = ak;
        nia++;
        ia[nia] = iafirst;
        ialast = b_ialast;
        iafirst = b_ialast + 1;
        iblast = b_iblast;
        ibfirst = b_iblast;
      } else if (ak < bk) {
        nc++;
        nia++;
        c[nc] = ak;
        ia[nia] = iafirst;
        ialast = b_ialast;
        iafirst = b_ialast + 1;
      } else {
        nc++;
        nib++;
        c[nc] = bk;
        ib[nib - 1] = ibfirst + 1;
        iblast = b_iblast;
        ibfirst = b_iblast;
      }
    }

    while (ialast + 1 <= i) {
      b_ialast = ialast + 1;
      while ((b_ialast < a.size(0)) && (a[b_ialast] == a[ialast])) {
        b_ialast++;
      }

      nc++;
      nia++;
      c[nc] = a[ialast];
      ia[nia] = iafirst;
      ialast = b_ialast;
      iafirst = b_ialast + 1;
    }

    while (iblast + 1 <= nb_tmp) {
      b_iblast = iblast + 1;
      while ((b_iblast < b.size(0)) && (b[b_iblast] == b[iblast])) {
        b_iblast++;
      }

      nc++;
      nib++;
      c[nc] = b[iblast];
      ib[nib - 1] = ibfirst + 1;
      iblast = b_iblast;
      ibfirst = b_iblast;
    }

    if (a.size(0) > 0) {
      if (nia + 1 < 1) {
        i = 0;
      } else {
        i = nia + 1;
      }

      ia.set_size(i);
    }

    if (b.size(0) > 0) {
      if (nib < 1) {
        nib = 0;
      }

      ib.set_size(nib);
    }

    if (ncmax > 0) {
      if (nc + 1 < 1) {
        i = 0;
      } else {
        i = nc + 1;
      }

      c.set_size(i);
    }
  }

  static double dot(const double a_data[], const int a_size[2], const array<
                    double, 2U> &b)
  {
    double c;
    c = 0.0;
    if (a_size[1] >= 1) {
      int i;
      i = a_size[1];
      for (int k{0}; k < i; k++) {
        c += a_data[k] * b[k];
      }
    }

    return c;
  }

  static void filter(const double x[500], double y[500])
  {
    std::memset(&y[0], 0, 500U * sizeof(double));
    for (int k{0}; k < 50; k++) {
      int b_k;
      b_k = k + 1;
      for (int j{b_k}; j < 501; j++) {
        y[j - 1] += 0.02 * x[(j - k) - 1];
      }
    }
  }

  static void filter(const array<double, 2U> &x, array<double, 2U> &y)
  {
    array<double, 1U> b;
    array<double, 1U> b_y1;
    int loop_ub;
    int nx_m_nb;
    loop_ub = x.size(1);
    b.set_size(x.size(1));
    for (nx_m_nb = 0; nx_m_nb < loop_ub; nx_m_nb++) {
      b[nx_m_nb] = x[nx_m_nb];
    }

    b_y1.set_size(x.size(1));
    for (nx_m_nb = 0; nx_m_nb < loop_ub; nx_m_nb++) {
      b_y1[nx_m_nb] = 0.0;
    }

    if (b.size(0) >= 80) {
      for (int k{0}; k < 40; k++) {
        nx_m_nb = k + 1;
        for (int j{nx_m_nb}; j <= loop_ub; j++) {
          b_y1[j - 1] = b_y1[j - 1] + 0.025 * b[(j - k) - 1];
        }
      }
    } else {
      int naxpy;
      int y1_tmp;
      if (b.size(0) > 40) {
        nx_m_nb = b.size(0) - 41;
      } else {
        nx_m_nb = -1;
      }

      for (int k{0}; k <= nx_m_nb; k++) {
        for (int j{0}; j < 40; j++) {
          y1_tmp = k + j;
          b_y1[y1_tmp] = b_y1[y1_tmp] + b[k] * 0.025;
        }
      }

      naxpy = b.size(0) - nx_m_nb;
      nx_m_nb += 2;
      for (int k{nx_m_nb}; k <= loop_ub; k++) {
        for (int j{0}; j <= naxpy - 2; j++) {
          y1_tmp = (k + j) - 1;
          b_y1[y1_tmp] = b_y1[y1_tmp] + b[k - 1] * 0.025;
        }

        naxpy--;
      }
    }

    y.set_size(1, x.size(1));
    for (nx_m_nb = 0; nx_m_nb < loop_ub; nx_m_nb++) {
      y[nx_m_nb] = b_y1[nx_m_nb];
    }
  }

  static void findpeaks(const double Yin[426], double Ypk_data[], int Ypk_size[2],
                        double Xpk_data[], int Xpk_size[2])
  {
    array<int, 2U> y;
    array<int, 1U> b_fPk_data;
    array<int, 1U> b_iInfinite_data;
    array<int, 1U> c;
    array<int, 1U> ia;
    array<int, 1U> ib;
    double ykfirst;
    int idx_data[852];
    int fPk_data[426];
    int iInfinite_data[426];
    int i;
    int kfirst;
    int nInf;
    int nPk;
    short iFinite_data[426];
    char dir;
    bool isinfykfirst;
    nPk = -1;
    nInf = -1;
    dir = 'n';
    kfirst = -1;
    ykfirst = rtInf;
    isinfykfirst = true;
    for (int k{0}; k < 426; k++) {
      double yk;
      bool isinfyk;
      yk = Yin[k];
      if (std::isnan(yk)) {
        yk = rtInf;
        isinfyk = true;
      } else if (std::isinf(yk) && (yk > 0.0)) {
        isinfyk = true;
        nInf++;
        iInfinite_data[nInf] = k + 1;
      } else {
        isinfyk = false;
      }

      if (yk != ykfirst) {
        char previousdir;
        previousdir = dir;
        if (isinfyk || isinfykfirst) {
          dir = 'n';
        } else if (yk < ykfirst) {
          dir = 'd';
          if (previousdir == 'i') {
            nPk++;
            iFinite_data[nPk] = static_cast<short>(kfirst + 1);
          }
        } else {
          dir = 'i';
        }

        ykfirst = yk;
        kfirst = k;
        isinfykfirst = isinfyk;
      }
    }

    if (nPk + 1 < 1) {
      nPk = -1;
    }

    i = nPk + 1;
    if (nInf + 1 < 1) {
      nInf = -1;
    }

    nInf++;
    nPk = 0;
    for (int k{0}; k < i; k++) {
      short i1;
      i1 = iFinite_data[k];
      ykfirst = Yin[i1 - 1];
      if ((ykfirst > rtMinusInf) && (ykfirst - std::fmax(Yin[i1 - 2], Yin[i1]) >=
           0.0)) {
        nPk++;
        fPk_data[nPk - 1] = i1;
      }
    }

    if (nPk < 1) {
      kfirst = 0;
    } else {
      kfirst = nPk;
    }

    b_fPk_data.set(&fPk_data[0], kfirst);
    b_iInfinite_data.set(&iInfinite_data[0], nInf);
    do_vectors(b_fPk_data, b_iInfinite_data, c, ia, ib);
    nInf = c.size(0);
    y.set_size(1, c.size(0));
    if (c.size(0) > 0) {
      y[0] = 1;
      kfirst = 1;
      for (int k{2}; k <= nInf; k++) {
        kfirst++;
        y[k - 1] = kfirst;
      }
    }

    kfirst = c.size(0);
    for (i = 0; i < nInf; i++) {
      idx_data[i] = y[i];
    }

    if (kfirst > 426) {
      kfirst = 426;
    } else {
      kfirst = c.size(0);
    }

    for (i = 0; i < kfirst; i++) {
      fPk_data[i] = c[idx_data[i] - 1];
    }

    Ypk_size[0] = 1;
    Ypk_size[1] = kfirst;
    Xpk_size[0] = 1;
    Xpk_size[1] = kfirst;
    for (i = 0; i < kfirst; i++) {
      Ypk_data[i] = Yin[fPk_data[i] - 1];
      Xpk_data[i] = static_cast<short>(static_cast<short>(fPk_data[i] - 1) + 1);
    }
  }

  static void findpeaks(const array<double, 2U> &Yin, array<double, 2U> &Ypk,
                        array<double, 2U> &Xpk)
  {
    array<int, 2U> y;
    array<int, 1U> c;
    array<int, 1U> fPk;
    array<int, 1U> iInfinite;
    array<int, 1U> iPk;
    array<int, 1U> idx;
    double ykfirst;
    int i;
    int kfirst;
    int nInf;
    int nPk;
    char dir;
    bool isinfykfirst;
    i = Yin.size(1);
    fPk.set_size(Yin.size(1));
    iInfinite.set_size(Yin.size(1));
    nPk = 0;
    nInf = 0;
    dir = 'n';
    kfirst = 0;
    ykfirst = rtInf;
    isinfykfirst = true;
    for (int k{1}; k <= i; k++) {
      double yk;
      bool isinfyk;
      yk = Yin[k - 1];
      if (std::isnan(yk)) {
        yk = rtInf;
        isinfyk = true;
      } else if (std::isinf(yk) && (yk > 0.0)) {
        isinfyk = true;
        nInf++;
        iInfinite[nInf - 1] = k;
      } else {
        isinfyk = false;
      }

      if (yk != ykfirst) {
        char previousdir;
        previousdir = dir;
        if (isinfyk || isinfykfirst) {
          dir = 'n';
        } else if (yk < ykfirst) {
          dir = 'd';
          if (previousdir == 'i') {
            nPk++;
            fPk[nPk - 1] = kfirst;
          }
        } else {
          dir = 'i';
        }

        ykfirst = yk;
        kfirst = k;
        isinfykfirst = isinfyk;
      }
    }

    if (nPk < 1) {
      i = 0;
    } else {
      i = nPk;
    }

    fPk.set_size(i);
    if (nInf < 1) {
      nInf = 0;
    }

    iInfinite.set_size(nInf);
    iPk.set_size(i);
    nPk = 0;
    for (int k{0}; k < i; k++) {
      ykfirst = Yin[fPk[k] - 1];
      if ((ykfirst > rtMinusInf) && (ykfirst - std::fmax(Yin[fPk[k] - 2],
            Yin[fPk[k]]) >= 0.0)) {
        nPk++;
        iPk[nPk - 1] = fPk[k];
      }
    }

    if (nPk < 1) {
      nPk = 0;
    }

    iPk.set_size(nPk);
    do_vectors(iPk, iInfinite, c, idx, fPk);
    nInf = c.size(0);
    y.set_size(1, c.size(0));
    if (c.size(0) > 0) {
      y[0] = 1;
      nPk = 1;
      for (int k{2}; k <= nInf; k++) {
        nPk++;
        y[k - 1] = nPk;
      }
    }

    idx.set_size(c.size(0));
    for (i = 0; i < nInf; i++) {
      idx[i] = y[i];
    }

    if (idx.size(0) > Yin.size(1)) {
      fPk.set_size(Yin.size(1));
      idx.set_size(Yin.size(1));
    } else {
      fPk.set_size(c.size(0));
    }

    nPk = fPk.size(0);
    fPk.set_size(nPk);
    for (i = 0; i < nPk; i++) {
      fPk[i] = c[idx[i] - 1];
    }

    Ypk.set_size(1, nPk);
    Xpk.set_size(1, nPk);
    for (i = 0; i < nPk; i++) {
      Ypk[i] = Yin[fPk[i] - 1];
      Xpk[i] = static_cast<unsigned int>(fPk[i]);
    }
  }

  static void gradient(const double x[500], double varargout_1[500])
  {
    varargout_1[0] = x[1] - x[0];
    for (int j{0}; j < 498; j++) {
      varargout_1[j + 1] = (x[j + 2] - x[j]) / 2.0;
    }

    varargout_1[499] = x[499] - x[498];
  }

  static void gradient(const double x_data[], const int x_size[2], double
                       varargout_1_data[], int varargout_1_size[2])
  {
    if (x_size[1] == 1) {
      varargout_1_size[0] = 1;
      varargout_1_size[1] = 1;
      varargout_1_data[0] = 0.0;
    } else if (x_size[1] < 2) {
      int loop_ub;
      varargout_1_size[0] = 1;
      varargout_1_size[1] = static_cast<signed char>(x_size[1]);
      loop_ub = static_cast<signed char>(x_size[1]);
      if (loop_ub - 1 >= 0) {
        varargout_1_data[0] = 0.0;
      }
    } else {
      int loop_ub;
      varargout_1_size[0] = 1;
      loop_ub = x_size[1];
      varargout_1_size[1] = x_size[1];
      varargout_1_data[0] = x_data[1] - x_data[0];
      for (int j{2}; j < loop_ub; j++) {
        varargout_1_data[j - 1] = (x_data[j] - x_data[j - 2]) / 2.0;
      }

      varargout_1_data[x_size[1] - 1] = x_data[x_size[1] - 1] - x_data[x_size[1]
        - 2];
    }
  }

  namespace internal
  {
    namespace blas
    {
      static double xnrm2(int n, const array<double, 2U> &x, int ix0)
      {
        double y;
        y = 0.0;
        if (n >= 1) {
          if (n == 1) {
            y = std::abs(x[ix0 - 1]);
          } else {
            double scale;
            int kend;
            scale = 3.3121686421112381E-170;
            kend = ix0 + n;
            for (int k{ix0}; k < kend; k++) {
              double absxk;
              absxk = std::abs(x[k - 1]);
              if (absxk > scale) {
                double t;
                t = scale / absxk;
                y = y * t * t + 1.0;
                scale = absxk;
              } else {
                double t;
                t = absxk / scale;
                y += t * t;
              }
            }

            y = scale * std::sqrt(y);
          }
        }

        return y;
      }
    }

    static int64m_T i64ddiv(const int64m_T x)
    {
      static const int64m_T r{ { 0U, 0U }// chunks
      };

      static const int64m_T r13{ { MAX_uint32_T, 2147483647U }// chunks
      };

      static const int64m_T r2{ { 0U, 2147483648U }// chunks
      };

      static const uint64m_T r10{ { MAX_uint32_T, 2147483647U }// chunks
      };

      static const uint64m_T r16{ { 1U, 0U }// chunks
      };

      static const uint64m_T r18{ { MAX_uint32_T, MAX_uint32_T }// chunks
      };

      static const uint64m_T r3{ { 0U, 2147483648U }// chunks
      };

      static const uint64m_T r5{ { 0U, 0U }// chunks
      };

      static const uint64m_T r7{ { 0U, 2048000U }// chunks
      };

      int64m_T r14;
      int64m_T r4;
      int64m_T z;
      uint128m_T r15;
      uint64m_T b_nk_unsgn;
      uint64m_T nk_unsgn;
      uint64m_T r1;
      uint64m_T r11;
      uint64m_T r12;
      uint64m_T r17;
      uint64m_T r19;
      uint64m_T r20;
      uint64m_T r21;
      uint64m_T r22;
      uint64m_T r8;
      uint64m_T r9;
      uint64m_T res;
      uint64m_T t;
      int xexp;
      if (sMultiWordLt((const unsigned int *)&x.chunks[0U], (const unsigned int *)
                       &r.chunks[0U])) {
        if (sMultiWordGt((const unsigned int *)&x.chunks[0U], (const unsigned
              int *)&r2.chunks[0U])) {
          MultiWordNeg((const unsigned int *)&x.chunks[0U], (unsigned int *)
                       &r4.chunks[0U]);
          sMultiWord2MultiWord((const unsigned int *)&r4.chunks[0U], (unsigned
            int *)&r1.chunks[0U], 2);
        } else {
          r1 = r3;
        }
      } else {
        sMultiWord2MultiWord((const unsigned int *)&x.chunks[0U], (unsigned int *)
                             &r1.chunks[0U], 2);
      }

      if (uMultiWordEq((const unsigned int *)&r1.chunks[0U], (const unsigned int
            *)&r5.chunks[0U])) {
        res = r5;
      } else {
        uint64m_T r6;
        std::frexp(1000.0, &xexp);
        xexp = -43;
        r6 = r7;
        uMultiWordDivZero((const unsigned int *)&r1.chunks[0U], (const unsigned
          int *)&r7.chunks[0U], (unsigned int *)&res.chunks[0U], (unsigned int *)
                          &nk_unsgn.chunks[0U], (unsigned int *)&r8.chunks[0U],
                          (unsigned int *)&r9.chunks[0U]);
        uMultiWordDivZero((const unsigned int *)&r1.chunks[0U], (const unsigned
          int *)&r7.chunks[0U], (unsigned int *)&nk_unsgn.chunks[0U], (unsigned
          int *)&r9.chunks[0U], (unsigned int *)&r11.chunks[0U], (unsigned int *)
                          &r12.chunks[0U]);
        uMultiWordMul((const unsigned int *)&nk_unsgn.chunks[0U], (const
          unsigned int *)&r7.chunks[0U], (unsigned int *)&r15.chunks[0U]);
        uMultiWord2MultiWord((const unsigned int *)&r15.chunks[0U], 4, (unsigned
          int *)&r6.chunks[0U]);
        MultiWordSub((const unsigned int *)&r1.chunks[0U], (const unsigned int *)
                     &r6.chunks[0U], (unsigned int *)&nk_unsgn.chunks[0U], 2);
        int exitg1;
        do {
          exitg1 = 0;
          if (xexp < 0) {
            int shiftAmount;
            shiftAmount = -xexp;
            if (shiftAmount > 11) {
              shiftAmount = 11;
            }

            uMultiWordShr((const unsigned int *)&res.chunks[0U], static_cast<
                          unsigned int>(64 - shiftAmount), (unsigned int *)
                          &r9.chunks[0U]);
            if (uMultiWordGt((const unsigned int *)&r9.chunks[0U], (const
                  unsigned int *)&r5.chunks[0U])) {
              res = r18;
              exitg1 = 1;
            } else {
              uMultiWordShl((const unsigned int *)&res.chunks[0U], static_cast<
                            unsigned int>(shiftAmount), (unsigned int *)
                            &r17.chunks[0U]);
              uMultiWordShl((const unsigned int *)&nk_unsgn.chunks[0U],
                            static_cast<unsigned int>(shiftAmount), (unsigned
                int *)&b_nk_unsgn.chunks[0U]);
              xexp += shiftAmount;
              r8 = r7;
              uMultiWordDivZero((const unsigned int *)&b_nk_unsgn.chunks[0U], (
                const unsigned int *)&r7.chunks[0U], (unsigned int *)&t.chunks
                                [0U], (unsigned int *)&res.chunks[0U], (unsigned
                int *)&r19.chunks[0U], (unsigned int *)&r20.chunks[0U]);
              res = r18;
              MultiWordSub((const unsigned int *)&r18.chunks[0U], (const
                unsigned int *)&t.chunks[0U], (unsigned int *)&r8.chunks[0U], 2);
              if (uMultiWordLe((const unsigned int *)&r8.chunks[0U], (const
                    unsigned int *)&r17.chunks[0U])) {
                exitg1 = 1;
              } else {
                MultiWordAdd((const unsigned int *)&r17.chunks[0U], (const
                  unsigned int *)&t.chunks[0U], (unsigned int *)&res.chunks[0U]);
                uMultiWordDivZero((const unsigned int *)&b_nk_unsgn.chunks[0U],
                                  (const unsigned int *)&r7.chunks[0U],
                                  (unsigned int *)&r20.chunks[0U], (unsigned int
                  *)&r1.chunks[0U], (unsigned int *)&r21.chunks[0U], (unsigned
                  int *)&r22.chunks[0U]);
                uMultiWordMul((const unsigned int *)&r20.chunks[0U], (const
                  unsigned int *)&r7.chunks[0U], (unsigned int *)&r15.chunks[0U]);
                uMultiWord2MultiWord((const unsigned int *)&r15.chunks[0U], 4,
                                     (unsigned int *)&r19.chunks[0U]);
                MultiWordSub((const unsigned int *)&b_nk_unsgn.chunks[0U], (
                  const unsigned int *)&r19.chunks[0U], (unsigned int *)
                             &r20.chunks[0U], 2);
                nk_unsgn = r20;
              }
            }
          } else {
            uMultiWordShl((const unsigned int *)&nk_unsgn.chunks[0U], 1U,
                          (unsigned int *)&r6.chunks[0U]);
            if (uMultiWordGe((const unsigned int *)&r6.chunks[0U], (const
                  unsigned int *)&r7.chunks[0U])) {
              MultiWordAdd((const unsigned int *)&res.chunks[0U], (const
                unsigned int *)&r16.chunks[0U], (unsigned int *)&r11.chunks[0U]);
              res = r11;
            }

            exitg1 = 1;
          }
        } while (exitg1 == 0);
      }

      if (sMultiWordLt((const unsigned int *)&x.chunks[0U], (const unsigned int *)
                       &r.chunks[0U])) {
        if (uMultiWordLe((const unsigned int *)&res.chunks[0U], (const unsigned
              int *)&r10.chunks[0U])) {
          uMultiWord2MultiWord((const unsigned int *)&res.chunks[0U], 2,
                               (unsigned int *)&r14.chunks[0U]);
          MultiWordNeg((const unsigned int *)&r14.chunks[0U], (unsigned int *)
                       &z.chunks[0U]);
        } else {
          z = r2;
        }
      } else if (uMultiWordLe((const unsigned int *)&res.chunks[0U], (const
                   unsigned int *)&r10.chunks[0U])) {
        uMultiWord2MultiWord((const unsigned int *)&res.chunks[0U], 2, (unsigned
          int *)&z.chunks[0U]);
      } else {
        z = r13;
      }

      return z;
    }

    namespace lapack
    {
      static int xgeqp3(array<double, 2U> &A, double tau_data[], int jpvt[2])
      {
        int m_tmp;
        int tau_size;
        bool guard1;
        m_tmp = A.size(0);
        tau_size = A.size(0);
        if (tau_size > 2) {
          tau_size = 2;
        }

        if (tau_size - 1 >= 0) {
          std::memset(&tau_data[0], 0, static_cast<unsigned int>(tau_size) *
                      sizeof(double));
        }

        guard1 = false;
        if (A.size(0) == 0) {
          guard1 = true;
        } else {
          int u0;
          u0 = A.size(0);
          if (u0 > 2) {
            u0 = 2;
          }

          if (u0 < 1) {
            guard1 = true;
          } else {
            double vn1[2];
            double vn2[2];
            double work[2];
            double temp;
            u0 = A.size(0);
            if (u0 > 2) {
              u0 = 2;
            }

            jpvt[0] = 1;
            work[0] = 0.0;
            temp = blas::xnrm2(m_tmp, A, 1);
            vn1[0] = temp;
            vn2[0] = temp;
            jpvt[1] = 2;
            work[1] = 0.0;
            temp = blas::xnrm2(m_tmp, A, m_tmp + 1);
            vn1[1] = temp;
            vn2[1] = temp;
            for (int i{0}; i < u0; i++) {
              double atmp;
              double temp2;
              int b_i;
              int ii;
              int ii_tmp;
              int ip1;
              int ix;
              int knt;
              int lastv;
              int mmi;
              int pvt;
              ip1 = i + 2;
              ii_tmp = i * m_tmp;
              ii = ii_tmp + i;
              mmi = m_tmp - i;
              ix = 0;
              if ((2 - i > 1) && (std::abs(vn1[1]) > std::abs(vn1[i]))) {
                ix = 1;
              }

              pvt = i + ix;
              if (pvt != i) {
                ix = pvt * m_tmp;
                for (lastv = 0; lastv < m_tmp; lastv++) {
                  knt = ix + lastv;
                  temp = A[knt];
                  b_i = ii_tmp + lastv;
                  A[knt] = A[b_i];
                  A[b_i] = temp;
                }

                ix = jpvt[pvt];
                jpvt[pvt] = jpvt[i];
                jpvt[i] = ix;
                vn1[pvt] = vn1[i];
                vn2[pvt] = vn2[i];
              }

              if (i + 1 < m_tmp) {
                atmp = A[ii];
                ix = ii + 2;
                tau_data[i] = 0.0;
                if (mmi > 0) {
                  temp = blas::xnrm2(mmi - 1, A, ii + 2);
                  if (temp != 0.0) {
                    temp2 = std::abs(A[ii]);
                    temp = std::abs(temp);
                    if (temp2 < temp) {
                      temp2 /= temp;
                      temp *= std::sqrt(temp2 * temp2 + 1.0);
                    } else if (temp2 > temp) {
                      temp /= temp2;
                      temp = temp2 * std::sqrt(temp * temp + 1.0);
                    } else if (std::isnan(temp)) {
                      temp = rtNaN;
                    } else {
                      temp = temp2 * 1.4142135623730951;
                    }

                    if (A[ii] >= 0.0) {
                      temp = -temp;
                    }

                    if (std::abs(temp) < 1.0020841800044864E-292) {
                      knt = 0;
                      b_i = ii + mmi;
                      do {
                        knt++;
                        for (lastv = ix; lastv <= b_i; lastv++) {
                          A[lastv - 1] = 9.9792015476736E+291 * A[lastv - 1];
                        }

                        temp *= 9.9792015476736E+291;
                        atmp *= 9.9792015476736E+291;
                      } while ((std::abs(temp) < 1.0020841800044864E-292) &&
                               (knt < 20));

                      temp2 = std::abs(atmp);
                      temp = std::abs(blas::xnrm2(mmi - 1, A, ii + 2));
                      if (temp2 < temp) {
                        temp2 /= temp;
                        temp *= std::sqrt(temp2 * temp2 + 1.0);
                      } else if (temp2 > temp) {
                        temp /= temp2;
                        temp = temp2 * std::sqrt(temp * temp + 1.0);
                      } else if (std::isnan(temp)) {
                        temp = rtNaN;
                      } else {
                        temp = temp2 * 1.4142135623730951;
                      }

                      if (atmp >= 0.0) {
                        temp = -temp;
                      }

                      tau_data[i] = (temp - atmp) / temp;
                      temp2 = 1.0 / (atmp - temp);
                      for (lastv = ix; lastv <= b_i; lastv++) {
                        A[lastv - 1] = temp2 * A[lastv - 1];
                      }

                      for (lastv = 0; lastv < knt; lastv++) {
                        temp *= 1.0020841800044864E-292;
                      }

                      atmp = temp;
                    } else {
                      tau_data[i] = (temp - A[ii]) / temp;
                      temp2 = 1.0 / (A[ii] - temp);
                      b_i = ii + mmi;
                      for (lastv = ix; lastv <= b_i; lastv++) {
                        A[lastv - 1] = temp2 * A[lastv - 1];
                      }

                      atmp = temp;
                    }
                  }
                }

                A[ii] = atmp;
              } else {
                tau_data[i] = 0.0;
              }

              if (i + 1 < 2) {
                int jA;
                atmp = A[ii];
                A[ii] = 1.0;
                jA = (ii + m_tmp) + 1;
                if (tau_data[0] != 0.0) {
                  lastv = mmi - 1;
                  ix = (ii + mmi) - 1;
                  while ((lastv + 1 > 0) && (A[ix] == 0.0)) {
                    lastv--;
                    ix--;
                  }

                  pvt = 1;
                  ix = jA;
                  int exitg1;
                  do {
                    exitg1 = 0;
                    if (ix <= jA + lastv) {
                      if (A[ix - 1] != 0.0) {
                        exitg1 = 1;
                      } else {
                        ix++;
                      }
                    } else {
                      pvt = 0;
                      exitg1 = 1;
                    }
                  } while (exitg1 == 0);
                } else {
                  lastv = -1;
                  pvt = 0;
                }

                if (lastv + 1 > 0) {
                  if (pvt != 0) {
                    work[0] = 0.0;
                    knt = 0;
                    for (ii_tmp = jA; m_tmp < 0 ? ii_tmp >= jA : ii_tmp <= jA;
                         ii_tmp += m_tmp) {
                      temp = 0.0;
                      b_i = ii_tmp + lastv;
                      for (ix = ii_tmp; ix <= b_i; ix++) {
                        temp += A[ix - 1] * A[(ii + ix) - ii_tmp];
                      }

                      work[knt] += temp;
                      knt++;
                    }
                  }

                  if (!(-tau_data[0] == 0.0)) {
                    for (ii_tmp = 0; ii_tmp < pvt; ii_tmp++) {
                      if (work[0] != 0.0) {
                        temp = work[0] * -tau_data[0];
                        b_i = lastv + jA;
                        for (knt = jA; knt <= b_i; knt++) {
                          A[knt - 1] = A[knt - 1] + A[(ii + knt) - jA] * temp;
                        }
                      }

                      jA += m_tmp;
                    }
                  }
                }

                A[ii] = atmp;
              }

              for (ii_tmp = ip1; ii_tmp < 3; ii_tmp++) {
                ix = i + m_tmp;
                if (vn1[1] != 0.0) {
                  temp = std::abs(A[ix]) / vn1[1];
                  temp = 1.0 - temp * temp;
                  if (temp < 0.0) {
                    temp = 0.0;
                  }

                  temp2 = vn1[1] / vn2[1];
                  temp2 = temp * (temp2 * temp2);
                  if (temp2 <= 1.4901161193847656E-8) {
                    if (i + 1 < m_tmp) {
                      temp = blas::xnrm2(mmi - 1, A, ix + 2);
                      vn1[1] = temp;
                      vn2[1] = temp;
                    } else {
                      vn1[1] = 0.0;
                      vn2[1] = 0.0;
                    }
                  } else {
                    vn1[1] *= std::sqrt(temp);
                  }
                }
              }
            }
          }
        }

        if (guard1) {
          jpvt[0] = 1;
          jpvt[1] = 2;
        }

        return tau_size;
      }
    }

    static double maximum(const double x[2])
    {
      double ex;
      if ((x[0] < x[1]) || (std::isnan(x[0]) && (!std::isnan(x[1])))) {
        ex = x[1];
      } else {
        ex = x[0];
      }

      return ex;
    }

    static double maximum(const array<double, 2U> &x)
    {
      double ex;
      int last;
      last = x.size(1);
      if (x.size(1) <= 2) {
        if (x.size(1) == 1) {
          ex = x[0];
        } else {
          ex = x[x.size(1) - 1];
          if ((!(x[0] < ex)) && ((!std::isnan(x[0])) || std::isnan(ex))) {
            ex = x[0];
          }
        }
      } else {
        int idx;
        int k;
        if (!std::isnan(x[0])) {
          idx = 1;
        } else {
          bool exitg1;
          idx = 0;
          k = 2;
          exitg1 = false;
          while ((!exitg1) && (k <= last)) {
            if (!std::isnan(x[k - 1])) {
              idx = k;
              exitg1 = true;
            } else {
              k++;
            }
          }
        }

        if (idx == 0) {
          ex = x[0];
        } else {
          ex = x[idx - 1];
          idx++;
          for (k = idx; k <= last; k++) {
            double d;
            d = x[k - 1];
            if (ex < d) {
              ex = d;
            }
          }
        }
      }

      return ex;
    }

    static double minimum(const double x_data[], const int x_size[2], int &idx)
    {
      double ex;
      int last_tmp;
      last_tmp = x_size[1];
      if (x_size[1] <= 2) {
        if (x_size[1] == 1) {
          ex = x_data[0];
          idx = 1;
        } else {
          ex = x_data[x_size[1] - 1];
          if ((x_data[0] > ex) || (std::isnan(x_data[0]) && (!std::isnan(ex))))
          {
            idx = x_size[1];
          } else {
            ex = x_data[0];
            idx = 1;
          }
        }
      } else {
        int k;
        if (!std::isnan(x_data[0])) {
          idx = 1;
        } else {
          bool exitg1;
          idx = 0;
          k = 2;
          exitg1 = false;
          while ((!exitg1) && (k <= last_tmp)) {
            if (!std::isnan(x_data[k - 1])) {
              idx = k;
              exitg1 = true;
            } else {
              k++;
            }
          }
        }

        if (idx == 0) {
          ex = x_data[0];
          idx = 1;
        } else {
          int i;
          ex = x_data[idx - 1];
          i = idx + 1;
          for (k = i; k <= last_tmp; k++) {
            double d;
            d = x_data[k - 1];
            if (ex > d) {
              ex = d;
              idx = k;
            }
          }
        }
      }

      return ex;
    }

    static double minimum(const double x[2])
    {
      double ex;
      if ((x[0] > x[1]) || (std::isnan(x[0]) && (!std::isnan(x[1])))) {
        ex = x[1];
      } else {
        ex = x[0];
      }

      return ex;
    }
  }

  static void interp1(const array<double, 2U> &varargin_1, const array<double,
                      2U> &varargin_2, const double varargin_3[500], double Vq
                      [500])
  {
    array<double, 2U> b_y;
    array<double, 2U> pp_coefs;
    array<double, 2U> x;
    array<double, 2U> y;
    double xtmp;
    int i;
    int loop_ub;
    int nx;
    loop_ub = varargin_2.size(1);
    y.set_size(1, varargin_2.size(1));
    for (i = 0; i < loop_ub; i++) {
      y[i] = varargin_2[i];
    }

    nx = varargin_1.size(1);
    x.set_size(1, varargin_1.size(1));
    for (i = 0; i < nx; i++) {
      x[i] = varargin_1[i];
    }

    nx = varargin_1.size(1) - 1;
    if (varargin_1[1] < varargin_1[0]) {
      int j2;
      i = varargin_1.size(1) >> 1;
      for (int b_j1{0}; b_j1 < i; b_j1++) {
        xtmp = x[b_j1];
        j2 = nx - b_j1;
        x[b_j1] = x[j2];
        x[j2] = xtmp;
      }

      nx = varargin_2.size(1) >> 1;
      for (int b_j1{0}; b_j1 < nx; b_j1++) {
        j2 = (varargin_2.size(1) - b_j1) - 1;
        xtmp = y[b_j1];
        y[b_j1] = y[j2];
        y[j2] = xtmp;
      }
    }

    b_y.set_size(1, varargin_2.size(1));
    for (i = 0; i < loop_ub; i++) {
      b_y[i] = y[i];
    }

    pchip(x, b_y, y, pp_coefs);
    for (nx = 0; nx < 500; nx++) {
      xtmp = varargin_3[nx];
      if (std::isnan(xtmp)) {
        Vq[nx] = rtNaN;
      } else {
        Vq[nx] = ppval(y, pp_coefs, xtmp);
      }
    }
  }

  static void interp1(const array<double, 2U> &varargin_1, const array<double,
                      2U> &varargin_2, const array<double, 2U> &varargin_3,
                      array<double, 2U> &Vq)
  {
    array<double, 2U> b_y;
    array<double, 2U> pp_coefs;
    array<double, 2U> x;
    array<double, 2U> y;
    int i;
    int loop_ub;
    int nd2;
    int nx;
    loop_ub = varargin_2.size(1);
    y.set_size(1, varargin_2.size(1));
    for (i = 0; i < loop_ub; i++) {
      y[i] = varargin_2[i];
    }

    nd2 = varargin_1.size(1);
    x.set_size(1, varargin_1.size(1));
    for (i = 0; i < nd2; i++) {
      x[i] = varargin_1[i];
    }

    nx = varargin_1.size(1) - 1;
    Vq.set_size(1, varargin_3.size(1));
    nd2 = varargin_3.size(1);
    for (i = 0; i < nd2; i++) {
      Vq[i] = 0.0;
    }

    if (varargin_3.size(1) != 0) {
      double xtmp;
      if (varargin_1[1] < varargin_1[0]) {
        i = varargin_1.size(1) >> 1;
        for (int b_j1{0}; b_j1 < i; b_j1++) {
          xtmp = x[b_j1];
          nd2 = nx - b_j1;
          x[b_j1] = x[nd2];
          x[nd2] = xtmp;
        }

        nd2 = varargin_2.size(1) >> 1;
        for (int b_j1{0}; b_j1 < nd2; b_j1++) {
          nx = (varargin_2.size(1) - b_j1) - 1;
          xtmp = y[b_j1];
          y[b_j1] = y[nx];
          y[nx] = xtmp;
        }
      }

      b_y.set_size(1, varargin_2.size(1));
      for (i = 0; i < loop_ub; i++) {
        b_y[i] = y[i];
      }

      pchip(x, b_y, y, pp_coefs);
      nd2 = varargin_3.size(1);
      for (nx = 0; nx < nd2; nx++) {
        xtmp = varargin_3[nx];
        if (std::isnan(xtmp)) {
          Vq[nx] = rtNaN;
        } else {
          Vq[nx] = ppval(y, pp_coefs, xtmp);
        }
      }
    }
  }

  static void linspace(double d1, double d2, const int64m_T n, array<double, 2U>
                       &y)
  {
    static const int64m_T r{ { 0U, 0U }// chunks
    };

    if (sMultiWordLt((const unsigned int *)&n.chunks[0U], (const unsigned int *)
                     &r.chunks[0U])) {
      y.set_size(1, 0);
    } else {
      int i;
      i = MultiWord2sLong((const unsigned int *)&n.chunks[0U]);
      y.set_size(1, i);
      if (i >= 1) {
        y[MultiWord2sLong((const unsigned int *)&n.chunks[0U]) - 1] = d2;
        if (y.size(1) >= 2) {
          y[0] = d1;
          if (y.size(1) >= 3) {
            if (d1 == -d2) {
              double delta1;
              delta1 = d2 / (static_cast<double>(y.size(1)) - 1.0);
              for (int k{2}; k < i; k++) {
                y[k - 1] = static_cast<double>(((k << 1) - y.size(1)) - 1) *
                  delta1;
              }

              if ((static_cast<unsigned int>(y.size(1)) & 1U) == 1U) {
                y[y.size(1) >> 1] = 0.0;
              }
            } else {
              double delta1;
              delta1 = (d2 - d1) / (static_cast<double>(y.size(1)) - 1.0);
              for (int k{0}; k <= i - 3; k++) {
                y[k + 1] = d1 + (static_cast<double>(k) + 1.0) * delta1;
              }
            }
          }
        }
      }
    }
  }

  static void linspace(double d2, double y[500])
  {
    double delta1;
    y[499] = d2;
    y[0] = 1.0;
    delta1 = (d2 - 1.0) / 499.0;
    for (int k{0}; k < 498; k++) {
      y[k + 1] = (static_cast<double>(k) + 1.0) * delta1 + 1.0;
    }
  }

  static void pchip(const array<double, 2U> &x, const array<double, 2U> &y,
                    array<double, 2U> &v_breaks, array<double, 2U> &v_coefs)
  {
    array<double, 2U> del;
    array<double, 2U> h;
    array<double, 2U> slopes;
    double d;
    double d2;
    double dzdxdx;
    double dzzdx;
    double signd1;
    int i;
    int nxm2;
    nxm2 = x.size(1) - 2;
    h.set_size(1, x.size(1) - 1);
    i = y.size(1) - 1;
    del.set_size(1, y.size(1) - 1);
    for (int k{0}; k <= nxm2; k++) {
      d2 = x[k + 1] - x[k];
      h[k] = d2;
      del[k] = (y[k + 1] - y[k]) / d2;
    }

    slopes.set_size(1, y.size(1));
    if (x.size(1) == 2) {
      slopes[0] = del[0];
      slopes[1] = del[0];
    } else {
      nxm2 = x.size(1);
      for (int k{0}; k <= nxm2 - 3; k++) {
        d2 = h[k + 1];
        d = h[k];
        signd1 = 2.0 * d2 + d;
        dzdxdx = d2 + 2.0 * d;
        slopes[k + 1] = 0.0;
        d2 = del[k];
        d = del[k + 1];
        dzzdx = d2 * d;
        if (!std::isnan(dzzdx)) {
          if (dzzdx < 0.0) {
            dzzdx = -1.0;
          } else {
            dzzdx = (dzzdx > 0.0);
          }
        }

        if (dzzdx > 0.0) {
          slopes[k + 1] = (signd1 + dzdxdx) / (signd1 / d2 + dzdxdx / d);
        }
      }

      dzzdx = del[0];
      d2 = del[1];
      dzdxdx = h[0];
      signd1 = h[1];
      dzdxdx = ((2.0 * dzdxdx + signd1) * dzzdx - dzdxdx * d2) / (dzdxdx +
        signd1);
      if (std::isnan(dzzdx)) {
        signd1 = rtNaN;
      } else if (dzzdx < 0.0) {
        signd1 = -1.0;
      } else {
        signd1 = (dzzdx > 0.0);
      }

      if (std::isnan(dzdxdx)) {
        d = rtNaN;
      } else if (dzdxdx < 0.0) {
        d = -1.0;
      } else {
        d = (dzdxdx > 0.0);
      }

      if (d != signd1) {
        dzdxdx = 0.0;
      } else {
        if (std::isnan(d2)) {
          d = rtNaN;
        } else if (d2 < 0.0) {
          d = -1.0;
        } else {
          d = (d2 > 0.0);
        }

        if ((signd1 != d) && (std::abs(dzdxdx) > std::abs(3.0 * dzzdx))) {
          dzdxdx = 3.0 * dzzdx;
        }
      }

      slopes[0] = dzdxdx;
      dzzdx = del[x.size(1) - 2];
      d2 = del[x.size(1) - 3];
      dzdxdx = h[x.size(1) - 2];
      signd1 = h[x.size(1) - 3];
      dzdxdx = ((2.0 * dzdxdx + signd1) * dzzdx - dzdxdx * d2) / (dzdxdx +
        signd1);
      if (std::isnan(dzzdx)) {
        signd1 = rtNaN;
      } else if (dzzdx < 0.0) {
        signd1 = -1.0;
      } else {
        signd1 = (dzzdx > 0.0);
      }

      if (std::isnan(dzdxdx)) {
        d = rtNaN;
      } else if (dzdxdx < 0.0) {
        d = -1.0;
      } else {
        d = (dzdxdx > 0.0);
      }

      if (d != signd1) {
        dzdxdx = 0.0;
      } else {
        if (std::isnan(d2)) {
          d = rtNaN;
        } else if (d2 < 0.0) {
          d = -1.0;
        } else {
          d = (d2 > 0.0);
        }

        if ((signd1 != d) && (std::abs(dzdxdx) > std::abs(3.0 * dzzdx))) {
          dzdxdx = 3.0 * dzzdx;
        }
      }

      slopes[x.size(1) - 1] = dzdxdx;
    }

    nxm2 = x.size(1);
    v_breaks.set_size(1, x.size(1));
    for (int k{0}; k < nxm2; k++) {
      v_breaks[k] = x[k];
    }

    v_coefs.set_size(y.size(1) - 1, 4);
    for (int k{0}; k <= nxm2 - 2; k++) {
      d2 = del[k];
      d = slopes[k];
      signd1 = h[k];
      dzzdx = (d2 - d) / signd1;
      dzdxdx = (slopes[k + 1] - d2) / signd1;
      v_coefs[k] = (dzdxdx - dzzdx) / signd1;
      v_coefs[i + k] = 2.0 * dzzdx - dzdxdx;
      v_coefs[(i << 1) + k] = d;
      v_coefs[3 * i + k] = y[k];
    }
  }

  static double ppval(const array<double, 2U> &pp_breaks, const array<double, 2U>
                      &pp_coefs, double x)
  {
    double v;
    if (std::isnan(x)) {
      v = rtNaN;
    } else {
      int high_i;
      int low_i;
      int low_ip1;
      high_i = pp_breaks.size(1);
      low_i = 1;
      low_ip1 = 2;
      while (high_i > low_ip1) {
        int mid_i;
        mid_i = (low_i >> 1) + (high_i >> 1);
        if (((static_cast<unsigned int>(low_i) & 1U) == 1U) && ((static_cast<
              unsigned int>(high_i) & 1U) == 1U)) {
          mid_i++;
        }

        if (x >= pp_breaks[mid_i - 1]) {
          low_i = mid_i;
          low_ip1 = mid_i + 1;
        } else {
          high_i = mid_i;
        }
      }

      v = x - pp_breaks[low_i - 1];
      v = v * (v * (v * pp_coefs[low_i - 1] + pp_coefs[(low_i + pp_breaks.size(1))
                    - 2]) + pp_coefs[(low_i + ((pp_breaks.size(1) - 1) << 1)) -
               1]) + pp_coefs[(low_i + 3 * (pp_breaks.size(1) - 1)) - 1];
    }

    return v;
  }
}

static double find_pulse_points(const double processed_pulse[500], double
  &diastolic_peak, double &dicrotic_notch)
{
  coder::array<double, 2U> b_tmp_data;
  coder::array<double, 2U> r;
  double pulse[500];
  double a__1_data[426];
  double tmp_data[426];
  double search_end;
  double systolic_peak;
  int a__1_size[2];
  int iv[2];
  int i;
  int iindx;
  int loop_ub;

  // FIND_PULSE_POINTS
  //  Find the major anatomy points of a processed PPG pulse.
  //  Smooth the pulse heavily to reduce any noise
  // SMOOTH
  //  Returns a smoothed and unshifted signal with window size n.
  coder::filter(processed_pulse, pulse);

  //  Then, trim a small amount from the beginning and end to remove the foot
  //  (these are guaranteed to be in range by preprocess_ppg_pulse, which
  //  resamples the pulse to a fixed number of samples
  coder::findpeaks(&pulse[59], a__1_data, a__1_size, tmp_data, iv);

  //  Case 0: very poor signal, no peaks at all
  if (iv[1] == 0) {
    systolic_peak = 1.0;
    diastolic_peak = 426.0;

    //  Case 1: the notch is clearly visible, with 2 whole peaks
  } else if (iv[1] > 1) {
    systolic_peak = tmp_data[0];
    diastolic_peak = tmp_data[1];

    //  Case 2: the notch is too flat, but systolic notch is there -- use
    //  derivative method to find the location of the diastolic notch
  } else {
    double b_dv[2];
    systolic_peak = tmp_data[0];

    //  Add a small offset so that we don't select the systolic peak again
    b_dv[0] = 20.0;
    b_dv[1] = 426.0 - tmp_data[0];
    search_end = tmp_data[0] + coder::internal::minimum(b_dv);
    if (search_end > 426.0) {
      iindx = -1;
      i = -2;
    } else {
      iindx = static_cast<int>(search_end) - 2;
      i = 424;
    }

    iv[0] = 1;
    loop_ub = i - iindx;
    iv[1] = loop_ub + 1;
    for (i = 0; i <= loop_ub; i++) {
      a__1_data[i] = pulse[(iindx + i) + 60];
    }

    coder::gradient(a__1_data, iv, tmp_data, a__1_size);
    b_tmp_data.set(&tmp_data[0], a__1_size[0], a__1_size[1]);
    coder::b_abs(b_tmp_data, r);
    iv[0] = (*(int (*)[2])r.size())[0];
    iv[1] = (*(int (*)[2])r.size())[1];
    coder::internal::minimum((const double *)r.data(), iv, iindx);
    diastolic_peak = (search_end + static_cast<double>(iindx)) - 1.0;
  }

  //  Finally, search for the dicrotic notch in between both peaks
  //  Don't search the entire range to avoid slipping into the diastolic peak
  search_end = systolic_peak + std::round(0.65 * (diastolic_peak - systolic_peak));
  if (systolic_peak > search_end) {
    iindx = -1;
    i = -2;
  } else {
    iindx = static_cast<int>(systolic_peak) - 2;
    i = static_cast<int>(search_end) - 2;
  }

  coder::filter(processed_pulse, pulse);
  iv[0] = 1;
  loop_ub = i - iindx;
  iv[1] = loop_ub + 1;
  for (i = 0; i <= loop_ub; i++) {
    a__1_data[i] = pulse[(iindx + i) + 60];
  }

  coder::internal::minimum(a__1_data, iv, iindx);
  dicrotic_notch = (systolic_peak + static_cast<double>(iindx)) - 1.0;
  return systolic_peak;
}

static void minus(coder::array<double, 1U> &in1, const coder::array<double, 1U>
                  &in2)
{
  coder::array<double, 1U> b_in1;
  int loop_ub;
  int stride_0_0;
  int stride_1_0;
  if (in2.size(0) == 1) {
    loop_ub = in1.size(0);
  } else {
    loop_ub = in2.size(0);
  }

  b_in1.set_size(loop_ub);
  stride_0_0 = (in1.size(0) != 1);
  stride_1_0 = (in2.size(0) != 1);
  for (int i{0}; i < loop_ub; i++) {
    b_in1[i] = in1[i * stride_0_0] - in2[i * stride_1_0];
  }

  in1.set_size(loop_ub);
  for (int i{0}; i < loop_ub; i++) {
    in1[i] = b_in1[i];
  }
}

static double sMultiWord2Double(const unsigned int u1[])
{
  double y;
  int b_exp;
  y = 0.0;
  b_exp = 0;
  if ((u1[1] & 2147483648U) != 0U) {
    int cb;
    cb = 1;
    for (int i{0}; i < 2; i++) {
      unsigned int u1i;
      unsigned int yi;
      u1i = ~u1[i];
      yi = u1i + static_cast<unsigned int>(cb);
      y -= std::ldexp(static_cast<double>(yi), b_exp);
      cb = (yi < u1i);
      b_exp += 32;
    }
  } else {
    for (int i{0}; i < 2; i++) {
      y += std::ldexp(static_cast<double>(u1[i]), b_exp);
      b_exp += 32;
    }
  }

  return y;
}

static void sMultiWord2MultiWord(const unsigned int u1[], unsigned int y[], int
  n)
{
  int nm;
  if (n >= 2) {
    nm = 2;
  } else {
    nm = n;
  }

  if (nm - 1 >= 0) {
    std::copy(&u1[0], &u1[nm], &y[0]);
  }

  if (n > 2) {
    unsigned int u1i;
    if ((u1[1] & 2147483648U) != 0U) {
      u1i = MAX_uint32_T;
    } else {
      u1i = 0U;
    }

    for (int i{nm}; i < n; i++) {
      y[i] = u1i;
    }
  }
}

static void sMultiWord2sMultiWordSat(const unsigned int u1[], unsigned int y[])
{
  int i;
  unsigned int ys;
  bool doSaturation{ false };

  if ((u1[2] & 2147483648U) != 0U) {
    ys = MAX_uint32_T;
  } else {
    ys = 0U;
  }

  doSaturation = (((u1[1] ^ u1[2]) & 2147483648U) != 0U);
  i = 2;
  while ((!doSaturation) && (i >= 2)) {
    doSaturation = (u1[2] != ys);
    i = 1;
  }

  if (doSaturation) {
    ys = ~ys;
    y[0] = ys;
    y[1] = ys ^ 2147483648U;
  } else {
    for (i = 0; i < 2; i++) {
      y[i] = u1[i];
    }

    while (i < 2) {
      y[i] = ys;
      i++;
    }
  }
}

static int sMultiWordCmp(const unsigned int u1[], const unsigned int u2[])
{
  unsigned int su1;
  int y;
  su1 = u1[1] & 2147483648U;
  if (su1 != (u2[1] & 2147483648U)) {
    if (su1 != 0U) {
      y = -1;
    } else {
      y = 1;
    }
  } else {
    int i;
    y = 0;
    i = 2;
    while ((y == 0) && (i > 0)) {
      unsigned int u2i;
      i--;
      su1 = u1[i];
      u2i = u2[i];
      if (su1 != u2i) {
        if (su1 > u2i) {
          y = 1;
        } else {
          y = -1;
        }
      }
    }
  }

  return y;
}

static bool sMultiWordGt(const unsigned int u1[], const unsigned int u2[])
{
  return sMultiWordCmp(u1, u2) > 0;
}

static bool sMultiWordLt(const unsigned int u1[], const unsigned int u2[])
{
  return sMultiWordCmp(u1, u2) < 0;
}

static void sMultiWordMul(const unsigned int u1[], const unsigned int u2[],
  unsigned int y[])
{
  unsigned int cb;
  int cb1;
  int k;
  unsigned int yk;
  bool isNegative1;
  bool isNegative2;
  isNegative1 = ((u1[1] & 2147483648U) != 0U);
  isNegative2 = ((u2[1] & 2147483648U) != 0U);
  cb1 = 1;

  // Initialize output to zero
  for (k = 0; k < 3; k++) {
    y[k] = 0U;
  }

  for (int i{0}; i < 2; i++) {
    int a0;
    int a1;
    int cb2;
    unsigned int u1i;
    cb = 0U;
    u1i = u1[i];
    if (isNegative1) {
      u1i = ~u1i + static_cast<unsigned int>(cb1);
      cb1 = (u1i < static_cast<unsigned int>(cb1));
    }

    a1 = static_cast<int>(u1i >> 16U);
    a0 = static_cast<int>(u1i & 65535U);
    cb2 = 1;
    k = i;
    for (int j{0}; j < 2; j++) {
      int b0;
      int b1;
      unsigned int t;
      unsigned int w01;
      u1i = u2[j];
      if (isNegative2) {
        u1i = ~u1i + static_cast<unsigned int>(cb2);
        cb2 = (u1i < static_cast<unsigned int>(cb2));
      }

      b1 = static_cast<int>(u1i >> 16U);
      b0 = static_cast<int>(u1i & 65535U);
      u1i = static_cast<unsigned int>(a1) * static_cast<unsigned int>(b0);
      w01 = static_cast<unsigned int>(a0) * static_cast<unsigned int>(b1);
      yk = y[k] + cb;
      cb = (yk < cb);
      t = static_cast<unsigned int>(a0) * static_cast<unsigned int>(b0);
      yk += t;
      cb += (yk < t);
      t = u1i << 16U;
      yk += t;
      cb += (yk < t);
      t = w01 << 16U;
      yk += t;
      cb += (yk < t);
      y[k] = yk;
      cb += u1i >> 16U;
      cb += w01 >> 16U;
      cb += static_cast<unsigned int>(a1) * static_cast<unsigned int>(b1);
      k++;
    }

    if (k < 3) {
      y[k] = cb;
    }
  }

  // Apply sign
  if (isNegative1 != isNegative2) {
    cb = 1U;
    for (k = 0; k < 3; k++) {
      yk = ~y[k] + cb;
      y[k] = yk;
      cb = (yk < cb);
    }
  }
}

static void uMultiWord2MultiWord(const unsigned int u1[], int n1, unsigned int
  y[])
{
  int nm;
  if (n1 <= 2) {
    nm = n1;
  } else {
    nm = 2;
  }

  if (nm - 1 >= 0) {
    std::copy(&u1[0], &u1[nm], &y[0]);
  }

  if (n1 < 2) {
    for (int i{nm}; i < 2; i++) {
      y[i] = 0U;
    }
  }
}

static int uMultiWordCmp(const unsigned int u1[], const unsigned int u2[])
{
  int i;
  int y;
  y = 0;
  i = 2;
  while ((y == 0) && (i > 0)) {
    unsigned int u1i;
    unsigned int u2i;
    i--;
    u1i = u1[i];
    u2i = u2[i];
    if (u1i != u2i) {
      if (u1i > u2i) {
        y = 1;
      } else {
        y = -1;
      }
    }
  }

  return y;
}

static int uMultiWordDiv(unsigned int a[], unsigned int b[], unsigned int q[],
  unsigned int r[])
{
  int nzb;
  int tpi;
  int y;
  nzb = 2;
  tpi = 1;
  while ((nzb > 0) && (b[tpi] == 0U)) {
    nzb--;
    tpi--;
  }

  if (nzb > 0) {
    int nza;
    nza = 2;
    for (tpi = 0; tpi < 2; tpi++) {
      q[tpi] = 0U;
    }

    tpi = 1;
    while ((nza > 0) && (a[tpi] == 0U)) {
      nza--;
      tpi--;
    }

    if ((nza > 0) && (nza >= nzb)) {
      int kr;
      int na1;
      int nb1;
      nb1 = nzb - 1;
      na1 = nza - 1;
      for (kr = 0; kr < 2; kr++) {
        r[kr] = 0U;
      }

      // Quick return if dividend and divisor fit into single word.
      if (nza == 1) {
        unsigned int ak;
        unsigned int bk;
        unsigned int u;
        ak = a[0];
        bk = b[0];
        u = ak / bk;
        q[0] = u;
        r[0] = ak - u * bk;
        y = 7;
      } else {
        unsigned int kba;
        unsigned int kbb;
        unsigned int t;

        // Remove leading zeros from both, dividend and divisor.
        kbb = 1U;
        t = b[nzb - 1] >> 1U;
        while (t != 0U) {
          kbb++;
          t >>= 1U;
        }

        kba = 1U;
        t = a[1] >> 1U;
        while (t != 0U) {
          kba++;
          t >>= 1U;
        }

        // Quick return if quotient is zero.
        if ((nzb < 2) || (kba >= kbb)) {
          unsigned int ak;
          unsigned int bk;
          int ka;
          unsigned int mask;
          unsigned int nba;
          unsigned int nbb;
          unsigned int tnb;
          unsigned int u;
          nba = kba + 32U;
          nbb = static_cast<unsigned int>(nzb - 1) * 32U + kbb;

          // Normalize b.
          if (kbb != 32U) {
            bk = b[nzb - 1];
            kr = nzb - 1;
            while (kr > 0) {
              t = bk << (32U - kbb);
              bk = b[0];
              t |= bk >> kbb;
              b[1] = t;
              kr = 0;
            }

            b[0] = bk << (32U - kbb);
            mask = ~((1U << (32U - kbb)) - 1U);
          } else {
            mask = MAX_uint32_T;
          }

          // Initialize quotient to zero.
          tnb = 0U;
          y = 0;

          // Until exit conditions have been met, do
          do {
            // Normalize a
            if (kba != 32U) {
              tnb = (tnb - kba) + 32U;
              ak = a[na1];
              ka = na1;
              while (ka > 0) {
                t = ak << (32U - kba);
                ak = a[0];
                t |= ak >> kba;
                a[1] = t;
                ka = 0;
              }

              a[0] = ak << (32U - kba);
            }

            // Compare b against the a.
            ak = a[na1];
            bk = b[nzb - 1];
            if (nzb - 1 == 0) {
              u = mask;
            } else {
              u = MAX_uint32_T;
            }

            if ((ak & u) == bk) {
              tpi = 0;
              ka = na1;
              kr = nzb - 1;
              while ((tpi == 0) && (kr > 0)) {
                ka--;
                ak = a[ka];
                kr = 0;
                bk = b[0];
                if ((ak & mask) != bk) {
                  if (ak > bk) {
                    tpi = 1;
                  } else {
                    tpi = -1;
                  }
                }
              }
            } else if (ak > bk) {
              tpi = 1;
            } else {
              tpi = -1;
            }

            // If the remainder in a is still greater or equal to b, subtract normalized divisor from a.
            if ((tpi >= 0) || (nba > nbb)) {
              u = nba - nbb;

              // If the remainder and the divisor are equal, set remainder to zero.
              if (tpi == 0) {
                ka = na1;
                kr = nzb - 1;
                while (kr > 0) {
                  a[ka] = 0U;
                  ka--;
                  kr = 0;
                }

                a[ka] -= b[0];
              } else {
                // Otherwise, subtract the divisor from the remainder
                if (tpi < 0) {
                  ak = a[na1];
                  kba = 31U;
                  ka = na1;
                  while (ka > 0) {
                    t = ak << 1U;
                    ak = a[0];
                    t |= ak >> 31U;
                    a[1] = t;
                    ka = 0;
                  }

                  a[0] = ak << 1U;
                  tnb++;
                  u--;
                }

                tpi = 0;
                ka = (na1 - nzb) + 1;
                for (kr = 0; kr < nzb; kr++) {
                  t = a[ka];
                  ak = (t - b[kr]) - static_cast<unsigned int>(tpi);
                  if (tpi != 0) {
                    tpi = (ak >= t);
                  } else {
                    tpi = (ak > t);
                  }

                  a[ka] = ak;
                  ka++;
                }
              }

              // Update the quotient.
              tpi = static_cast<int>(u) / 32;
              q[tpi] |= 1U << (u - static_cast<unsigned int>(tpi) * 32U);

              // Remove leading zeros from the remainder and check whether the exit conditions have been met.
              tpi = na1;
              while ((nza > 0) && (a[tpi] == 0U)) {
                nza--;
                tpi--;
              }

              if (nza >= nzb) {
                na1 = nza - 1;
                kba = 1U;
                t = a[nza - 1] >> 1U;
                while (t != 0U) {
                  kba++;
                  t >>= 1U;
                }

                nba = (static_cast<unsigned int>(nza - 1) * 32U + kba) - tnb;
                if (nba < nbb) {
                  y = 2;
                }
              } else if (nza == 0) {
                y = 1;
              } else {
                na1 = 0;
                y = 4;
              }
            } else {
              y = 3;
            }
          } while (y == 0);

          // Return the remainder.
          if (y == 1) {
            r[0] = a[0];
          } else {
            tpi = static_cast<int>(tnb) / 32;
            u = tnb - static_cast<unsigned int>(tpi) * 32U;
            if (u == 0U) {
              ka = tpi;
              for (kr = 0; kr <= nb1; kr++) {
                r[kr] = a[ka];
                ka++;
              }
            } else {
              ak = a[tpi];
              kr = 0;
              for (ka = tpi + 1; ka <= na1; ka++) {
                t = ak >> u;
                ak = a[ka];
                t |= ak << (32U - u);
                r[kr] = t;
                kr++;
              }

              r[kr] = ak >> u;
            }
          }

          // Restore b.
          if (kbb != 32U) {
            bk = b[0];
            for (kr = 0; kr < nb1; kr++) {
              t = bk >> (32U - kbb);
              bk = b[1];
              t |= bk << kbb;
              b[0] = t;
            }

            b[kr] = bk >> (32U - kbb);
          }
        } else {
          for (kr = 0; kr < 2; kr++) {
            r[kr] = a[kr];
          }

          y = 6;
        }
      }
    } else {
      for (int kr{0}; kr < 2; kr++) {
        r[kr] = a[kr];
      }

      y = 5;
    }
  } else {
    y = -1;
  }

  return y;
}

static void uMultiWordDivZero(const unsigned int u1[], const unsigned int u2[],
  unsigned int b_y1[], unsigned int y2[], unsigned int t1[], unsigned int t2[])
{
  uMultiWord2MultiWord(u1, 2, t1);
  uMultiWord2MultiWord(u2, 2, t2);
  if (uMultiWordDiv(t1, t2, b_y1, y2) < 0) {
    MultiWordSetUnsignedMax(b_y1);
  }
}

static bool uMultiWordEq(const unsigned int u1[], const unsigned int u2[])
{
  return uMultiWordCmp(u1, u2) == 0;
}

static bool uMultiWordGe(const unsigned int u1[], const unsigned int u2[])
{
  return uMultiWordCmp(u1, u2) >= 0;
}

static bool uMultiWordGt(const unsigned int u1[], const unsigned int u2[])
{
  return uMultiWordCmp(u1, u2) > 0;
}

static bool uMultiWordLe(const unsigned int u1[], const unsigned int u2[])
{
  return uMultiWordCmp(u1, u2) <= 0;
}

static void uMultiWordMul(const unsigned int u1[], const unsigned int u2[],
  unsigned int y[])
{
  int k;

  // Initialize output to zero
  for (k = 0; k < 4; k++) {
    y[k] = 0U;
  }

  for (int i{0}; i < 2; i++) {
    int a0;
    int a1;
    unsigned int cb;
    unsigned int u1i;
    cb = 0U;
    u1i = u1[i];
    a1 = static_cast<int>(u1i >> 16U);
    a0 = static_cast<int>(u1i & 65535U);
    k = i;
    for (int j{0}; j < 2; j++) {
      int b0;
      int b1;
      unsigned int t;
      unsigned int w01;
      unsigned int yk;
      u1i = u2[j];
      b1 = static_cast<int>(u1i >> 16U);
      b0 = static_cast<int>(u1i & 65535U);
      u1i = static_cast<unsigned int>(a1) * static_cast<unsigned int>(b0);
      w01 = static_cast<unsigned int>(a0) * static_cast<unsigned int>(b1);
      yk = y[k] + cb;
      cb = (yk < cb);
      t = static_cast<unsigned int>(a0) * static_cast<unsigned int>(b0);
      yk += t;
      cb += (yk < t);
      t = u1i << 16U;
      yk += t;
      cb += (yk < t);
      t = w01 << 16U;
      yk += t;
      cb += (yk < t);
      y[k] = yk;
      cb += u1i >> 16U;
      cb += w01 >> 16U;
      cb += static_cast<unsigned int>(a1) * static_cast<unsigned int>(b1);
      k++;
    }

    if (k < 4) {
      y[k] = cb;
    }
  }
}

static void uMultiWordShl(const unsigned int u1[], unsigned int n2, unsigned int
  y[])
{
  int i;
  int nb;
  int nc;
  unsigned int u1i;
  unsigned int ys;
  nb = static_cast<int>(n2) / 32;
  if ((u1[1] & 2147483648U) != 0U) {
    ys = MAX_uint32_T;
  } else {
    ys = 0U;
  }

  if (nb > 2) {
    nc = 2;
  } else {
    nc = nb;
  }

  u1i = 0U;
  if (nc - 1 >= 0) {
    std::memset(&y[0], 0, static_cast<unsigned int>(nc) * sizeof(unsigned int));
  }

  for (i = 0; i < nc; i++) {
  }

  if (nb < 2) {
    unsigned int nl;
    nl = n2 - static_cast<unsigned int>(nb) * 32U;
    nc = nb + 2;
    if (nb + 2 > 2) {
      nc = 2;
    }

    nc -= i;
    if (nl > 0U) {
      for (nb = 0; nb < nc; nb++) {
        unsigned int yi;
        yi = u1i >> (32U - nl);
        u1i = u1[nb];
        y[i] = yi | u1i << nl;
        i++;
      }

      if (i < 2) {
        y[i] = u1i >> (32U - nl) | ys << nl;
        i++;
      }
    } else {
      for (nb = 0; nb < nc; nb++) {
        y[i] = u1[nb];
        i++;
      }
    }
  }

  while (i < 2) {
    y[i] = ys;
    i++;
  }
}

static void uMultiWordShr(const unsigned int u1[], unsigned int n2, unsigned int
  y[])
{
  int i;
  int nb;
  nb = static_cast<int>(n2) / 32;
  i = 0;
  if (nb < 2) {
    int nc;
    unsigned int nr;
    nc = nb + 2;
    if (nb + 2 > 2) {
      nc = 2;
    }

    nr = n2 - static_cast<unsigned int>(nb) * 32U;
    if (nr > 0U) {
      unsigned int u1i;
      unsigned int yi;
      u1i = u1[nb];
      for (int i1{nb + 1}; i1 < nc; i1++) {
        yi = u1i >> nr;
        u1i = u1[i1];
        y[i] = yi | u1i << (32U - nr);
        i++;
      }

      yi = u1i >> nr;
      if (nc < 2) {
        yi |= u1[nc] << (32U - nr);
      }

      y[i] = yi;
      i++;
    } else {
      for (int i1{nb}; i1 < nc; i1++) {
        y[i] = u1[i1];
        i++;
      }
    }
  }

  while (i < 2) {
    y[i] = 0U;
    i++;
  }
}

void preprocess_ppg_signal(const coder::array<double, 2U> &ppg_signal, const
  coder::array<int64m_T, 2U> &timestamps, coder::array<double, 2U>
  &processed_ppg_signal)
{
  static const int64m_T r2{ { 150U, 0U }// chunks
  };

  coder::array<double, 2U> b_processed_ppg_signal;
  coder::array<double, 2U> b_timestamps;
  coder::array<double, 2U> r;
  int96m_T r3;
  int96m_T r5;
  int96m_T r6;
  int96m_T r7;
  double y;
  int loop_ub;

  // PREPROCESS_PPG_SIGNAL
  //  Returns a processed copy of a raw PPG signal (red
  //  channel values of a camera recording at the given timestamps,
  //  in milliseconds). Assumes raw PPG signal has the correct orientation.
  //  Normalize and rescale to [0, 1] range
  y = coder::combineVectorElements(ppg_signal) / static_cast<double>
    (ppg_signal.size(1));
  loop_ub = ppg_signal.size(1);
  processed_ppg_signal.set_size(1, ppg_signal.size(1));
  for (int i{0}; i < loop_ub; i++) {
    processed_ppg_signal[i] = ppg_signal[i] - y;
  }

  coder::b_abs(processed_ppg_signal, r);
  y = coder::internal::maximum(r);
  processed_ppg_signal.set_size(1, processed_ppg_signal.size(1));
  loop_ub = processed_ppg_signal.size(1) - 1;
  for (int i{0}; i <= loop_ub; i++) {
    processed_ppg_signal[i] = processed_ppg_signal[i] / y;
  }

  //  Interpolate using cubic interpolation
  //  Hz
  //  Milliseconds -> Seconds
  loop_ub = timestamps.size(1);
  b_timestamps.set_size(1, timestamps.size(1));
  for (int i{0}; i < loop_ub; i++) {
    b_timestamps[i] = sMultiWord2Double((const unsigned int *)&timestamps[i].
      chunks[0U]);
  }

  int64m_T r1;
  int64m_T r4;
  r1 = r2;
  sMultiWord2MultiWord((const unsigned int *)&timestamps[timestamps.size(1) - 1]
                       .chunks[0U], (unsigned int *)&r3.chunks[0U], 3);
  r4 = timestamps[0];
  sMultiWord2MultiWord((const unsigned int *)&timestamps[0].chunks[0U],
                       (unsigned int *)&r5.chunks[0U], 3);
  MultiWordSub((const unsigned int *)&r3.chunks[0U], (const unsigned int *)
               &r5.chunks[0U], (unsigned int *)&r6.chunks[0U], 3);
  sMultiWord2sMultiWordSat((const unsigned int *)&r6.chunks[0U], (unsigned int *)
    &r4.chunks[0U]);
  r4 = coder::internal::i64ddiv(r4);
  sMultiWordMul((const unsigned int *)&r2.chunks[0U], (const unsigned int *)
                &r4.chunks[0U], (unsigned int *)&r7.chunks[0U]);
  sMultiWord2sMultiWordSat((const unsigned int *)&r7.chunks[0U], (unsigned int *)
    &r1.chunks[0U]);
  coder::linspace(sMultiWord2Double((const unsigned int *)&timestamps[0].chunks
    [0U]), sMultiWord2Double((const unsigned int *)&timestamps[timestamps.size(1)
    - 1].chunks[0U]), r1, r);
  b_processed_ppg_signal.set_size(1, processed_ppg_signal.size(1));
  loop_ub = processed_ppg_signal.size(0) * processed_ppg_signal.size(1) - 1;
  for (int i{0}; i <= loop_ub; i++) {
    b_processed_ppg_signal[i] = processed_ppg_signal[i];
  }

  coder::interp1(b_timestamps, b_processed_ppg_signal, r, processed_ppg_signal);

  //  Detrend
  b_processed_ppg_signal.set_size(1, processed_ppg_signal.size(1));
  loop_ub = processed_ppg_signal.size(0) * processed_ppg_signal.size(1) - 1;
  for (int i{0}; i <= loop_ub; i++) {
    b_processed_ppg_signal[i] = processed_ppg_signal[i];
  }

  coder::detrend(b_processed_ppg_signal, processed_ppg_signal);
}

void preprocess_ppg_signal_initialize()
{
}

void preprocess_ppg_signal_terminate()
{
}

void score_ppg_signal_fourier(const coder::array<double, 2U>
  &processed_ppg_signal, const int64m_T coefficient_count, coder::array<double,
  1U> &scores)
{
  static const creal_T wwc[499]{ { 0.99992104420381611,// re
      0.012566039883352607             // im
    }, { 0.99873695660601747,          // re
      0.050244318179769556             // im
    }, { 0.9936113105200084,           // re
      0.11285638487348168              // im
    }, { 0.97985505238424686,          // re
      0.19970998051440703              // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { 0.89940525156637108,          // re
      0.43711576665093288              // im
    }, { 0.81633925071718394,          // re
      0.57757270342226752              // im
    }, { 0.69365330581280493,          // re
      0.72030902488790693              // im
    }, { 0.52517462996129571,          // re
      0.85099448179469184              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.0502443181797696,           // re
      0.99873695660601747              // im
    }, { -0.23649899702372465,         // re
      0.971631732914674                // im
    }, { -0.52517462996129582,         // re
      0.85099448179469173              // im
    }, { -0.77846230156702334,         // re
      0.62769136129070058              // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { -0.99715890026061393,         // re
      -0.075326805527932791            // im
    }, { -0.88229122643495328,         // re
      -0.47070393216533257             // im
    }, { -0.597904983057519,           // re
      -0.80156698487087641             // im
    }, { -0.17502305897527681,         // re
      -0.98456433452920522             // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { 0.73751311735817371,          // re
      -0.6753328081210247              // im
    }, { 0.97985505238424686,          // re
      -0.19970998051440719             // im
    }, { 0.934328942456612,            // re
      0.35641187871325075              // im
    }, { 0.57757270342226763,          // re
      0.81633925071718394              // im
    }, { 6.123233995736766E-17,        // re
      1.0                              // im
    }, { -0.59790498305751849,         // re
      0.80156698487087685              // im
    }, { -0.96538163883327388,         // re
      0.26084150628989705              // im
    }, { -0.91010597068499566,         // re
      -0.41437558099328409             // im
    }, { -0.41437558099328436,         // re
      -0.91010597068499555             // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { 0.88229122643495328,          // re
      -0.47070393216533252             // im
    }, { 0.954864544746643,            // re
      0.29704158157703492              // im
    }, { 0.43711576665093282,          // re
      0.89940525156637108              // im
    }, { -0.379779095521801,           // re
      0.925077206834458                // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { -0.83752804004214176,         // re
      -0.546394346734269               // im
    }, { -0.075326805527932653,        // re
      -0.99715890026061393             // im
    }, { 0.76244251101144789,          // re
      -0.64705596156944434             // im
    }, { 0.96538163883327388,          // re
      0.26084150628989694              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { -0.64705596156944445,         // re
      0.76244251101144778              // im
    }, { -0.98456433452920533,         // re
      -0.17502305897527609             // im
    }, { -0.32094360980720976,         // re
      -0.94709830499474423             // im
    }, { 0.69365330581280438,          // re
      -0.72030902488790749             // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { 0.1128563848734816,           // re
      0.9936113105200084               // im
    }, { -0.87018375466952569,         // re
      0.49272734154829162              // im
    }, { -0.77846230156702356,         // re
      -0.62769136129070036             // im
    }, { 0.32094360980720943,          // re
      -0.94709830499474434             // im
    }, { 1.0,                          // re
      0.0                              // im
    }, { 0.29704158157703486,          // re
      0.954864544746643                // im
    }, { -0.83752804004214165,         // re
      0.54639434673426923              // im
    }, { -0.73751311735817393,         // re
      -0.67533280812102436             // im
    }, { 0.49272734154829212,          // re
      -0.87018375466952536             // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { -0.13779029068463805,         // re
      0.99046142569665119              // im
    }, { -0.99992104420381611,         // re
      0.012566039883352836             // im
    }, { -0.13779029068463852,         // re
      -0.99046142569665119             // im
    }, { 0.97163173291467386,          // re
      -0.23649899702372515             // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { -0.934328942456612,           // re
      0.35641187871325081              // im
    }, { -0.37977909552180106,         // re
      -0.925077206834458               // im
    }, { 0.92507720683445771,          // re
      -0.37977909552180189             // im
    }, { 0.35641187871325075,          // re
      0.934328942456612                // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { -0.23649899702372423,         // re
      -0.97163173291467408             // im
    }, { 0.99046142569665119,          // re
      -0.13779029068463858             // im
    }, { 0.012566039883352776,         // re
      0.99992104420381611              // im
    }, { -0.9904614256966513,          // re
      -0.13779029068463777             // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { 0.87018375466952569,          // re
      0.49272734154829151              // im
    }, { -0.67533280812102436,         // re
      0.73751311735817393              // im
    }, { -0.5463943467342689,          // re
      -0.83752804004214187             // im
    }, { 0.954864544746643,            // re
      -0.29704158157703503             // im
    }, { 6.123233995736766E-17,        // re
      1.0                              // im
    }, { -0.94709830499474434,         // re
      -0.32094360980720948             // im
    }, { 0.62769136129070069,          // re
      -0.77846230156702323             // im
    }, { 0.49272734154829156,          // re
      0.87018375466952569              // im
    }, { -0.9936113105200084,          // re
      0.11285638487348143              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { 0.72030902488790693,          // re
      0.69365330581280493              // im
    }, { -0.94709830499474423,         // re
      0.32094360980720971              // im
    }, { 0.17502305897527645,          // re
      -0.98456433452920533             // im
    }, { 0.76244251101144789,          // re
      0.64705596156944423              // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { 0.26084150628989716,          // re
      -0.96538163883327377             // im
    }, { 0.64705596156944434,          // re
      0.76244251101144789              // im
    }, { -0.99715890026061393,         // re
      0.0753268055279326               // im
    }, { 0.54639434673426857,          // re
      -0.8375280400421421              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { -0.92507720683445815,         // re
      -0.37977909552180072             // im
    }, { 0.89940525156637119,          // re
      -0.43711576665093255             // im
    }, { -0.297041581577035,           // re
      0.954864544746643                // im
    }, { -0.47070393216533246,         // re
      -0.88229122643495339             // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { -0.91010597068499566,         // re
      0.41437558099328431              // im
    }, { 0.41437558099328403,          // re
      -0.91010597068499577             // im
    }, { 0.26084150628989677,          // re
      0.96538163883327388              // im
    }, { -0.80156698487087663,         // re
      -0.59790498305751882             // im
    }, { 1.0,                          // re
      0.0                              // im
    }, { -0.81633925071718394,         // re
      0.57757270342226763              // im
    }, { 0.35641187871325092,          // re
      -0.93432894245661191             // im
    }, { 0.19970998051440722,          // re
      0.97985505238424686              // im
    }, { -0.67533280812102425,         // re
      -0.737513117358174               // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { -0.98456433452920533,         // re
      0.17502305897527631              // im
    }, { 0.801566984870877,            // re
      -0.59790498305751838             // im
    }, { -0.47070393216533224,         // re
      0.8822912264349535               // im
    }, { 0.075326805527932292,         // re
      -0.99715890026061393             // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { -0.62769136129070091,         // re
      -0.77846230156702312             // im
    }, { 0.850994481794692,            // re
      0.5251746299612956               // im
    }, { -0.971631732914674,           // re
      -0.23649899702372437             // im
    }, { 0.99873695660601747,          // re
      -0.050244318179770223            // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { 0.85099448179469162,          // re
      -0.52517462996129616             // im
    }, { -0.72030902488790693,         // re
      0.69365330581280493              // im
    }, { 0.5775727034222673,           // re
      -0.81633925071718416             // im
    }, { -0.43711576665093271,         // re
      0.89940525156637119              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.19970998051440689,         // re
      0.97985505238424686              // im
    }, { 0.11285638487348157,          // re
      -0.9936113105200084              // im
    }, { -0.050244318179769473,        // re
      0.99873695660601747              // im
    }, { 0.012566039883352531,         // re
      -0.99992104420381611             // im
    }, { 6.123233995736766E-17,        // re
      1.0                              // im
    }, { 0.012566039883352531,         // re
      -0.99992104420381611             // im
    }, { -0.050244318179769473,        // re
      0.99873695660601747              // im
    }, { 0.11285638487348157,          // re
      -0.9936113105200084              // im
    }, { -0.19970998051440689,         // re
      0.97985505238424686              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.43711576665093271,         // re
      0.89940525156637119              // im
    }, { 0.5775727034222673,           // re
      -0.81633925071718416             // im
    }, { -0.72030902488790693,         // re
      0.69365330581280493              // im
    }, { 0.85099448179469162,          // re
      -0.52517462996129616             // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { 0.99873695660601747,          // re
      -0.050244318179770223            // im
    }, { -0.971631732914674,           // re
      -0.23649899702372437             // im
    }, { 0.850994481794692,            // re
      0.5251746299612956               // im
    }, { -0.62769136129070091,         // re
      -0.77846230156702312             // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.075326805527932292,         // re
      -0.99715890026061393             // im
    }, { -0.47070393216533224,         // re
      0.8822912264349535               // im
    }, { 0.801566984870877,            // re
      -0.59790498305751838             // im
    }, { -0.98456433452920533,         // re
      0.17502305897527631              // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { -0.67533280812102425,         // re
      -0.737513117358174               // im
    }, { 0.19970998051440722,          // re
      0.97985505238424686              // im
    }, { 0.35641187871325092,          // re
      -0.93432894245661191             // im
    }, { -0.81633925071718394,         // re
      0.57757270342226763              // im
    }, { 1.0,                          // re
      0.0                              // im
    }, { -0.80156698487087663,         // re
      -0.59790498305751882             // im
    }, { 0.26084150628989677,          // re
      0.96538163883327388              // im
    }, { 0.41437558099328403,          // re
      -0.91010597068499577             // im
    }, { -0.91010597068499566,         // re
      0.41437558099328431              // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { -0.47070393216533246,         // re
      -0.88229122643495339             // im
    }, { -0.297041581577035,           // re
      0.954864544746643                // im
    }, { 0.89940525156637119,          // re
      -0.43711576665093255             // im
    }, { -0.92507720683445815,         // re
      -0.37977909552180072             // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.54639434673426857,          // re
      -0.8375280400421421              // im
    }, { -0.99715890026061393,         // re
      0.0753268055279326               // im
    }, { 0.64705596156944434,          // re
      0.76244251101144789              // im
    }, { 0.26084150628989716,          // re
      -0.96538163883327377             // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { 0.76244251101144789,          // re
      0.64705596156944423              // im
    }, { 0.17502305897527645,          // re
      -0.98456433452920533             // im
    }, { -0.94709830499474423,         // re
      0.32094360980720971              // im
    }, { 0.72030902488790693,          // re
      0.69365330581280493              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.9936113105200084,          // re
      0.11285638487348143              // im
    }, { 0.49272734154829156,          // re
      0.87018375466952569              // im
    }, { 0.62769136129070069,          // re
      -0.77846230156702323             // im
    }, { -0.94709830499474434,         // re
      -0.32094360980720948             // im
    }, { 6.123233995736766E-17,        // re
      1.0                              // im
    }, { 0.954864544746643,            // re
      -0.29704158157703503             // im
    }, { -0.5463943467342689,          // re
      -0.83752804004214187             // im
    }, { -0.67533280812102436,         // re
      0.73751311735817393              // im
    }, { 0.87018375466952569,          // re
      0.49272734154829151              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.9904614256966513,          // re
      -0.13779029068463777             // im
    }, { 0.012566039883352776,         // re
      0.99992104420381611              // im
    }, { 0.99046142569665119,          // re
      -0.13779029068463858             // im
    }, { -0.23649899702372423,         // re
      -0.97163173291467408             // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { 0.35641187871325075,          // re
      0.934328942456612                // im
    }, { 0.92507720683445771,          // re
      -0.37977909552180189             // im
    }, { -0.37977909552180106,         // re
      -0.925077206834458               // im
    }, { -0.934328942456612,           // re
      0.35641187871325081              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.97163173291467386,          // re
      -0.23649899702372515             // im
    }, { -0.13779029068463852,         // re
      -0.99046142569665119             // im
    }, { -0.99992104420381611,         // re
      0.012566039883352836             // im
    }, { -0.13779029068463805,         // re
      0.99046142569665119              // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { 0.49272734154829212,          // re
      -0.87018375466952536             // im
    }, { -0.73751311735817393,         // re
      -0.67533280812102436             // im
    }, { -0.83752804004214165,         // re
      0.54639434673426923              // im
    }, { 0.29704158157703486,          // re
      0.954864544746643                // im
    }, { 1.0,                          // re
      0.0                              // im
    }, { 0.32094360980720943,          // re
      -0.94709830499474434             // im
    }, { -0.77846230156702356,         // re
      -0.62769136129070036             // im
    }, { -0.87018375466952569,         // re
      0.49272734154829162              // im
    }, { 0.1128563848734816,           // re
      0.9936113105200084               // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { 0.69365330581280438,          // re
      -0.72030902488790749             // im
    }, { -0.32094360980720976,         // re
      -0.94709830499474423             // im
    }, { -0.98456433452920533,         // re
      -0.17502305897527609             // im
    }, { -0.64705596156944445,         // re
      0.76244251101144778              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.96538163883327388,          // re
      0.26084150628989694              // im
    }, { 0.76244251101144789,          // re
      -0.64705596156944434             // im
    }, { -0.075326805527932653,        // re
      -0.99715890026061393             // im
    }, { -0.83752804004214176,         // re
      -0.546394346734269               // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { -0.379779095521801,           // re
      0.925077206834458                // im
    }, { 0.43711576665093282,          // re
      0.89940525156637108              // im
    }, { 0.954864544746643,            // re
      0.29704158157703492              // im
    }, { 0.88229122643495328,          // re
      -0.47070393216533252             // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.41437558099328436,         // re
      -0.91010597068499555             // im
    }, { -0.91010597068499566,         // re
      -0.41437558099328409             // im
    }, { -0.96538163883327388,         // re
      0.26084150628989705              // im
    }, { -0.59790498305751849,         // re
      0.80156698487087685              // im
    }, { 6.123233995736766E-17,        // re
      1.0                              // im
    }, { 0.57757270342226763,          // re
      0.81633925071718394              // im
    }, { 0.934328942456612,            // re
      0.35641187871325075              // im
    }, { 0.97985505238424686,          // re
      -0.19970998051440719             // im
    }, { 0.73751311735817371,          // re
      -0.6753328081210247              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.17502305897527681,         // re
      -0.98456433452920522             // im
    }, { -0.597904983057519,           // re
      -0.80156698487087641             // im
    }, { -0.88229122643495328,         // re
      -0.47070393216533257             // im
    }, { -0.99715890026061393,         // re
      -0.075326805527932791            // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { -0.77846230156702334,         // re
      0.62769136129070058              // im
    }, { -0.52517462996129582,         // re
      0.85099448179469173              // im
    }, { -0.23649899702372465,         // re
      0.971631732914674                // im
    }, { 0.0502443181797696,           // re
      0.99873695660601747              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.52517462996129571,          // re
      0.85099448179469184              // im
    }, { 0.69365330581280493,          // re
      0.72030902488790693              // im
    }, { 0.81633925071718394,          // re
      0.57757270342226752              // im
    }, { 0.89940525156637108,          // re
      0.43711576665093288              // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { 0.97985505238424686,          // re
      0.19970998051440703              // im
    }, { 0.9936113105200084,           // re
      0.11285638487348168              // im
    }, { 0.99873695660601747,          // re
      0.050244318179769556             // im
    }, { 0.99992104420381611,          // re
      0.012566039883352607             // im
    }, { 1.0,                          // re
      0.0                              // im
    }, { 0.99992104420381611,          // re
      0.012566039883352607             // im
    }, { 0.99873695660601747,          // re
      0.050244318179769556             // im
    }, { 0.9936113105200084,           // re
      0.11285638487348168              // im
    }, { 0.97985505238424686,          // re
      0.19970998051440703              // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { 0.89940525156637108,          // re
      0.43711576665093288              // im
    }, { 0.81633925071718394,          // re
      0.57757270342226752              // im
    }, { 0.69365330581280493,          // re
      0.72030902488790693              // im
    }, { 0.52517462996129571,          // re
      0.85099448179469184              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.0502443181797696,           // re
      0.99873695660601747              // im
    }, { -0.23649899702372465,         // re
      0.971631732914674                // im
    }, { -0.52517462996129582,         // re
      0.85099448179469173              // im
    }, { -0.77846230156702334,         // re
      0.62769136129070058              // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { -0.99715890026061393,         // re
      -0.075326805527932791            // im
    }, { -0.88229122643495328,         // re
      -0.47070393216533257             // im
    }, { -0.597904983057519,           // re
      -0.80156698487087641             // im
    }, { -0.17502305897527681,         // re
      -0.98456433452920522             // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { 0.73751311735817371,          // re
      -0.6753328081210247              // im
    }, { 0.97985505238424686,          // re
      -0.19970998051440719             // im
    }, { 0.934328942456612,            // re
      0.35641187871325075              // im
    }, { 0.57757270342226763,          // re
      0.81633925071718394              // im
    }, { 6.123233995736766E-17,        // re
      1.0                              // im
    }, { -0.59790498305751849,         // re
      0.80156698487087685              // im
    }, { -0.96538163883327388,         // re
      0.26084150628989705              // im
    }, { -0.91010597068499566,         // re
      -0.41437558099328409             // im
    }, { -0.41437558099328436,         // re
      -0.91010597068499555             // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { 0.88229122643495328,          // re
      -0.47070393216533252             // im
    }, { 0.954864544746643,            // re
      0.29704158157703492              // im
    }, { 0.43711576665093282,          // re
      0.89940525156637108              // im
    }, { -0.379779095521801,           // re
      0.925077206834458                // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { -0.83752804004214176,         // re
      -0.546394346734269               // im
    }, { -0.075326805527932653,        // re
      -0.99715890026061393             // im
    }, { 0.76244251101144789,          // re
      -0.64705596156944434             // im
    }, { 0.96538163883327388,          // re
      0.26084150628989694              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { -0.64705596156944445,         // re
      0.76244251101144778              // im
    }, { -0.98456433452920533,         // re
      -0.17502305897527609             // im
    }, { -0.32094360980720976,         // re
      -0.94709830499474423             // im
    }, { 0.69365330581280438,          // re
      -0.72030902488790749             // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { 0.1128563848734816,           // re
      0.9936113105200084               // im
    }, { -0.87018375466952569,         // re
      0.49272734154829162              // im
    }, { -0.77846230156702356,         // re
      -0.62769136129070036             // im
    }, { 0.32094360980720943,          // re
      -0.94709830499474434             // im
    }, { 1.0,                          // re
      0.0                              // im
    }, { 0.29704158157703486,          // re
      0.954864544746643                // im
    }, { -0.83752804004214165,         // re
      0.54639434673426923              // im
    }, { -0.73751311735817393,         // re
      -0.67533280812102436             // im
    }, { 0.49272734154829212,          // re
      -0.87018375466952536             // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { -0.13779029068463805,         // re
      0.99046142569665119              // im
    }, { -0.99992104420381611,         // re
      0.012566039883352836             // im
    }, { -0.13779029068463852,         // re
      -0.99046142569665119             // im
    }, { 0.97163173291467386,          // re
      -0.23649899702372515             // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { -0.934328942456612,           // re
      0.35641187871325081              // im
    }, { -0.37977909552180106,         // re
      -0.925077206834458               // im
    }, { 0.92507720683445771,          // re
      -0.37977909552180189             // im
    }, { 0.35641187871325075,          // re
      0.934328942456612                // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { -0.23649899702372423,         // re
      -0.97163173291467408             // im
    }, { 0.99046142569665119,          // re
      -0.13779029068463858             // im
    }, { 0.012566039883352776,         // re
      0.99992104420381611              // im
    }, { -0.9904614256966513,          // re
      -0.13779029068463777             // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { 0.87018375466952569,          // re
      0.49272734154829151              // im
    }, { -0.67533280812102436,         // re
      0.73751311735817393              // im
    }, { -0.5463943467342689,          // re
      -0.83752804004214187             // im
    }, { 0.954864544746643,            // re
      -0.29704158157703503             // im
    }, { 6.123233995736766E-17,        // re
      1.0                              // im
    }, { -0.94709830499474434,         // re
      -0.32094360980720948             // im
    }, { 0.62769136129070069,          // re
      -0.77846230156702323             // im
    }, { 0.49272734154829156,          // re
      0.87018375466952569              // im
    }, { -0.9936113105200084,          // re
      0.11285638487348143              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { 0.72030902488790693,          // re
      0.69365330581280493              // im
    }, { -0.94709830499474423,         // re
      0.32094360980720971              // im
    }, { 0.17502305897527645,          // re
      -0.98456433452920533             // im
    }, { 0.76244251101144789,          // re
      0.64705596156944423              // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { 0.26084150628989716,          // re
      -0.96538163883327377             // im
    }, { 0.64705596156944434,          // re
      0.76244251101144789              // im
    }, { -0.99715890026061393,         // re
      0.0753268055279326               // im
    }, { 0.54639434673426857,          // re
      -0.8375280400421421              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { -0.92507720683445815,         // re
      -0.37977909552180072             // im
    }, { 0.89940525156637119,          // re
      -0.43711576665093255             // im
    }, { -0.297041581577035,           // re
      0.954864544746643                // im
    }, { -0.47070393216533246,         // re
      -0.88229122643495339             // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { -0.91010597068499566,         // re
      0.41437558099328431              // im
    }, { 0.41437558099328403,          // re
      -0.91010597068499577             // im
    }, { 0.26084150628989677,          // re
      0.96538163883327388              // im
    }, { -0.80156698487087663,         // re
      -0.59790498305751882             // im
    }, { 1.0,                          // re
      0.0                              // im
    }, { -0.81633925071718394,         // re
      0.57757270342226763              // im
    }, { 0.35641187871325092,          // re
      -0.93432894245661191             // im
    }, { 0.19970998051440722,          // re
      0.97985505238424686              // im
    }, { -0.67533280812102425,         // re
      -0.737513117358174               // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { -0.98456433452920533,         // re
      0.17502305897527631              // im
    }, { 0.801566984870877,            // re
      -0.59790498305751838             // im
    }, { -0.47070393216533224,         // re
      0.8822912264349535               // im
    }, { 0.075326805527932292,         // re
      -0.99715890026061393             // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { -0.62769136129070091,         // re
      -0.77846230156702312             // im
    }, { 0.850994481794692,            // re
      0.5251746299612956               // im
    }, { -0.971631732914674,           // re
      -0.23649899702372437             // im
    }, { 0.99873695660601747,          // re
      -0.050244318179770223            // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { 0.85099448179469162,          // re
      -0.52517462996129616             // im
    }, { -0.72030902488790693,         // re
      0.69365330581280493              // im
    }, { 0.5775727034222673,           // re
      -0.81633925071718416             // im
    }, { -0.43711576665093271,         // re
      0.89940525156637119              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.19970998051440689,         // re
      0.97985505238424686              // im
    }, { 0.11285638487348157,          // re
      -0.9936113105200084              // im
    }, { -0.050244318179769473,        // re
      0.99873695660601747              // im
    }, { 0.012566039883352531,         // re
      -0.99992104420381611             // im
    }, { 6.123233995736766E-17,        // re
      1.0                              // im
    }, { 0.012566039883352531,         // re
      -0.99992104420381611             // im
    }, { -0.050244318179769473,        // re
      0.99873695660601747              // im
    }, { 0.11285638487348157,          // re
      -0.9936113105200084              // im
    }, { -0.19970998051440689,         // re
      0.97985505238424686              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.43711576665093271,         // re
      0.89940525156637119              // im
    }, { 0.5775727034222673,           // re
      -0.81633925071718416             // im
    }, { -0.72030902488790693,         // re
      0.69365330581280493              // im
    }, { 0.85099448179469162,          // re
      -0.52517462996129616             // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { 0.99873695660601747,          // re
      -0.050244318179770223            // im
    }, { -0.971631732914674,           // re
      -0.23649899702372437             // im
    }, { 0.850994481794692,            // re
      0.5251746299612956               // im
    }, { -0.62769136129070091,         // re
      -0.77846230156702312             // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.075326805527932292,         // re
      -0.99715890026061393             // im
    }, { -0.47070393216533224,         // re
      0.8822912264349535               // im
    }, { 0.801566984870877,            // re
      -0.59790498305751838             // im
    }, { -0.98456433452920533,         // re
      0.17502305897527631              // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { -0.67533280812102425,         // re
      -0.737513117358174               // im
    }, { 0.19970998051440722,          // re
      0.97985505238424686              // im
    }, { 0.35641187871325092,          // re
      -0.93432894245661191             // im
    }, { -0.81633925071718394,         // re
      0.57757270342226763              // im
    }, { 1.0,                          // re
      0.0                              // im
    }, { -0.80156698487087663,         // re
      -0.59790498305751882             // im
    }, { 0.26084150628989677,          // re
      0.96538163883327388              // im
    }, { 0.41437558099328403,          // re
      -0.91010597068499577             // im
    }, { -0.91010597068499566,         // re
      0.41437558099328431              // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { -0.47070393216533246,         // re
      -0.88229122643495339             // im
    }, { -0.297041581577035,           // re
      0.954864544746643                // im
    }, { 0.89940525156637119,          // re
      -0.43711576665093255             // im
    }, { -0.92507720683445815,         // re
      -0.37977909552180072             // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.54639434673426857,          // re
      -0.8375280400421421              // im
    }, { -0.99715890026061393,         // re
      0.0753268055279326               // im
    }, { 0.64705596156944434,          // re
      0.76244251101144789              // im
    }, { 0.26084150628989716,          // re
      -0.96538163883327377             // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { 0.76244251101144789,          // re
      0.64705596156944423              // im
    }, { 0.17502305897527645,          // re
      -0.98456433452920533             // im
    }, { -0.94709830499474423,         // re
      0.32094360980720971              // im
    }, { 0.72030902488790693,          // re
      0.69365330581280493              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.9936113105200084,          // re
      0.11285638487348143              // im
    }, { 0.49272734154829156,          // re
      0.87018375466952569              // im
    }, { 0.62769136129070069,          // re
      -0.77846230156702323             // im
    }, { -0.94709830499474434,         // re
      -0.32094360980720948             // im
    }, { 6.123233995736766E-17,        // re
      1.0                              // im
    }, { 0.954864544746643,            // re
      -0.29704158157703503             // im
    }, { -0.5463943467342689,          // re
      -0.83752804004214187             // im
    }, { -0.67533280812102436,         // re
      0.73751311735817393              // im
    }, { 0.87018375466952569,          // re
      0.49272734154829151              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.9904614256966513,          // re
      -0.13779029068463777             // im
    }, { 0.012566039883352776,         // re
      0.99992104420381611              // im
    }, { 0.99046142569665119,          // re
      -0.13779029068463858             // im
    }, { -0.23649899702372423,         // re
      -0.97163173291467408             // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { 0.35641187871325075,          // re
      0.934328942456612                // im
    }, { 0.92507720683445771,          // re
      -0.37977909552180189             // im
    }, { -0.37977909552180106,         // re
      -0.925077206834458               // im
    }, { -0.934328942456612,           // re
      0.35641187871325081              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.97163173291467386,          // re
      -0.23649899702372515             // im
    }, { -0.13779029068463852,         // re
      -0.99046142569665119             // im
    }, { -0.99992104420381611,         // re
      0.012566039883352836             // im
    }, { -0.13779029068463805,         // re
      0.99046142569665119              // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { 0.49272734154829212,          // re
      -0.87018375466952536             // im
    }, { -0.73751311735817393,         // re
      -0.67533280812102436             // im
    }, { -0.83752804004214165,         // re
      0.54639434673426923              // im
    }, { 0.29704158157703486,          // re
      0.954864544746643                // im
    }, { 1.0,                          // re
      0.0                              // im
    }, { 0.32094360980720943,          // re
      -0.94709830499474434             // im
    }, { -0.77846230156702356,         // re
      -0.62769136129070036             // im
    }, { -0.87018375466952569,         // re
      0.49272734154829162              // im
    }, { 0.1128563848734816,           // re
      0.9936113105200084               // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { 0.69365330581280438,          // re
      -0.72030902488790749             // im
    }, { -0.32094360980720976,         // re
      -0.94709830499474423             // im
    }, { -0.98456433452920533,         // re
      -0.17502305897527609             // im
    }, { -0.64705596156944445,         // re
      0.76244251101144778              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.96538163883327388,          // re
      0.26084150628989694              // im
    }, { 0.76244251101144789,          // re
      -0.64705596156944434             // im
    }, { -0.075326805527932653,        // re
      -0.99715890026061393             // im
    }, { -0.83752804004214176,         // re
      -0.546394346734269               // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { -0.379779095521801,           // re
      0.925077206834458                // im
    }, { 0.43711576665093282,          // re
      0.89940525156637108              // im
    }, { 0.954864544746643,            // re
      0.29704158157703492              // im
    }, { 0.88229122643495328,          // re
      -0.47070393216533252             // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.41437558099328436,         // re
      -0.91010597068499555             // im
    }, { -0.91010597068499566,         // re
      -0.41437558099328409             // im
    }, { -0.96538163883327388,         // re
      0.26084150628989705              // im
    }, { -0.59790498305751849,         // re
      0.80156698487087685              // im
    }, { 6.123233995736766E-17,        // re
      1.0                              // im
    }, { 0.57757270342226763,          // re
      0.81633925071718394              // im
    }, { 0.934328942456612,            // re
      0.35641187871325075              // im
    }, { 0.97985505238424686,          // re
      -0.19970998051440719             // im
    }, { 0.73751311735817371,          // re
      -0.6753328081210247              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.17502305897527681,         // re
      -0.98456433452920522             // im
    }, { -0.597904983057519,           // re
      -0.80156698487087641             // im
    }, { -0.88229122643495328,         // re
      -0.47070393216533257             // im
    }, { -0.99715890026061393,         // re
      -0.075326805527932791            // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { -0.77846230156702334,         // re
      0.62769136129070058              // im
    }, { -0.52517462996129582,         // re
      0.85099448179469173              // im
    }, { -0.23649899702372465,         // re
      0.971631732914674                // im
    }, { 0.0502443181797696,           // re
      0.99873695660601747              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.52517462996129571,          // re
      0.85099448179469184              // im
    }, { 0.69365330581280493,          // re
      0.72030902488790693              // im
    }, { 0.81633925071718394,          // re
      0.57757270342226752              // im
    }, { 0.89940525156637108,          // re
      0.43711576665093288              // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { 0.97985505238424686,          // re
      0.19970998051440703              // im
    }, { 0.9936113105200084,           // re
      0.11285638487348168              // im
    }, { 0.99873695660601747,          // re
      0.050244318179769556             // im
    }, { 0.99992104420381611,          // re
      0.012566039883352607             // im
    } };

  static const double sintabinv[513]{ 0.0, 0.0061358846491544753,
    0.012271538285719925, 0.01840672990580482, 0.024541228522912288,
    0.030674803176636626, 0.036807222941358832, 0.04293825693494082,
    0.049067674327418015, 0.055195244349689941, 0.061320736302208578,
    0.067443919563664051, 0.073564563599667426, 0.079682437971430126,
    0.0857973123444399, 0.091908956497132724, 0.0980171403295606,
    0.10412163387205459, 0.11022220729388306, 0.11631863091190475,
    0.1224106751992162, 0.12849811079379317, 0.13458070850712617,
    0.14065823933284921, 0.14673047445536175, 0.15279718525844344,
    0.15885814333386145, 0.16491312048996992, 0.17096188876030122,
    0.17700422041214875, 0.18303988795514095, 0.18906866414980619,
    0.19509032201612825, 0.2011046348420919, 0.20711137619221856,
    0.21311031991609136, 0.2191012401568698, 0.22508391135979283,
    0.23105810828067111, 0.2370236059943672, 0.24298017990326387,
    0.24892760574572015, 0.25486565960451457, 0.26079411791527551,
    0.26671275747489837, 0.272621355449949, 0.27851968938505306,
    0.28440753721127188, 0.29028467725446233, 0.29615088824362379,
    0.30200594931922808, 0.30784964004153487, 0.31368174039889152,
    0.31950203081601569, 0.32531029216226293, 0.33110630575987643,
    0.33688985339222005, 0.34266071731199438, 0.34841868024943456,
    0.35416352542049034, 0.35989503653498811, 0.36561299780477385,
    0.37131719395183749, 0.37700741021641826, 0.38268343236508978,
    0.38834504669882625, 0.3939920400610481, 0.39962419984564679,
    0.40524131400498986, 0.41084317105790391, 0.41642956009763715,
    0.42200027079979968, 0.42755509343028208, 0.43309381885315196,
    0.43861623853852766, 0.4441221445704292, 0.44961132965460654,
    0.45508358712634384, 0.46053871095824, 0.46597649576796618,
    0.47139673682599764, 0.47679923006332209, 0.48218377207912272,
    0.487550160148436, 0.49289819222978404, 0.49822766697278181,
    0.50353838372571758, 0.508830142543107, 0.51410274419322166,
    0.51935599016558964, 0.524589682678469, 0.52980362468629461,
    0.53499761988709715, 0.54017147272989285, 0.54532498842204646,
    0.55045797293660481, 0.55557023301960218, 0.560661576197336,
    0.56573181078361312, 0.57078074588696726, 0.57580819141784534,
    0.58081395809576453, 0.58579785745643886, 0.59075970185887416,
    0.59569930449243336, 0.600616479383869, 0.60551104140432555,
    0.61038280627630948, 0.61523159058062682, 0.6200572117632891,
    0.62485948814238634, 0.629638238914927, 0.63439328416364549,
    0.63912444486377573, 0.64383154288979139, 0.64851440102211244,
    0.65317284295377676, 0.65780669329707864, 0.66241577759017178,
    0.66699992230363747, 0.67155895484701833, 0.67609270357531592,
    0.680600997795453, 0.68508366777270036, 0.68954054473706683,
    0.69397146088965389, 0.69837624940897292, 0.7027547444572253,
    0.70710678118654757, 0.71143219574521643, 0.71573082528381859,
    0.72000250796138165, 0.724247082951467, 0.7284643904482252,
    0.73265427167241282, 0.73681656887736979, 0.74095112535495922,
    0.745057785441466, 0.74913639452345937, 0.75318679904361252,
    0.75720884650648457, 0.76120238548426178, 0.765167265622459,
    0.7691033376455797, 0.773010453362737, 0.77688846567323244,
    0.78073722857209449, 0.78455659715557524, 0.78834642762660634,
    0.79210657730021239, 0.79583690460888357, 0.799537269107905,
    0.80320753148064494, 0.80684755354379933, 0.81045719825259477,
    0.81403632970594841, 0.81758481315158371, 0.82110251499110465,
    0.82458930278502529, 0.8280450452577558, 0.83146961230254524,
    0.83486287498638, 0.83822470555483808, 0.84155497743689844,
    0.84485356524970712, 0.84812034480329723, 0.8513551931052652,
    0.85455798836540053, 0.85772861000027212, 0.86086693863776731,
    0.8639728561215867, 0.86704624551569265, 0.87008699110871146,
    0.87309497841829009, 0.8760700941954066, 0.87901222642863353,
    0.881921264348355, 0.88479709843093779, 0.88763962040285393,
    0.89044872324475788, 0.89322430119551532, 0.89596624975618522,
    0.89867446569395382, 0.901348847046022, 0.90398929312344334,
    0.90659570451491533, 0.90916798309052238, 0.91170603200542988,
    0.91420975570353069, 0.9166790599210427, 0.91911385169005777,
    0.9215140393420419, 0.92387953251128674, 0.92621024213831138,
    0.92850608047321559, 0.93076696107898371, 0.932992798834739,
    0.93518350993894761, 0.937339011912575, 0.93945922360218992,
    0.94154406518302081, 0.94359345816196039, 0.94560732538052128,
    0.94758559101774109, 0.94952818059303667, 0.95143502096900834,
    0.95330604035419386, 0.95514116830577078, 0.95694033573220882,
    0.9587034748958716, 0.96043051941556579, 0.96212140426904158,
    0.96377606579543984, 0.9653944416976894, 0.96697647104485207,
    0.96852209427441727, 0.970031253194544, 0.97150389098625178,
    0.97293995220556018, 0.97433938278557586, 0.97570213003852857,
    0.97702814265775439, 0.97831737071962765, 0.97956976568544052,
    0.98078528040323043, 0.98196386910955524, 0.98310548743121629,
    0.984210092386929, 0.98527764238894122, 0.98630809724459867,
    0.98730141815785843, 0.98825756773074946, 0.989176509964781,
    0.99005821026229712, 0.99090263542778, 0.99170975366909953, 0.99247953459871,
    0.9932119492347945, 0.99390697000235606, 0.99456457073425542,
    0.99518472667219693, 0.99576741446765982, 0.996312612182778,
    0.99682029929116567, 0.99729045667869021, 0.99772306664419164,
    0.99811811290014918, 0.99847558057329477, 0.99879545620517241,
    0.99907772775264536, 0.99932238458834954, 0.99952941750109314,
    0.99969881869620425, 0.9998305817958234, 0.9999247018391445,
    0.99998117528260111, 1.0, 0.99998117528260111, 0.9999247018391445,
    0.9998305817958234, 0.99969881869620425, 0.99952941750109314,
    0.99932238458834954, 0.99907772775264536, 0.99879545620517241,
    0.99847558057329477, 0.99811811290014918, 0.99772306664419164,
    0.99729045667869021, 0.99682029929116567, 0.996312612182778,
    0.99576741446765982, 0.99518472667219693, 0.99456457073425542,
    0.99390697000235606, 0.9932119492347945, 0.99247953459871,
    0.99170975366909953, 0.99090263542778, 0.99005821026229712,
    0.989176509964781, 0.98825756773074946, 0.98730141815785843,
    0.98630809724459867, 0.98527764238894122, 0.984210092386929,
    0.98310548743121629, 0.98196386910955524, 0.98078528040323043,
    0.97956976568544052, 0.97831737071962765, 0.97702814265775439,
    0.97570213003852857, 0.97433938278557586, 0.97293995220556018,
    0.97150389098625178, 0.970031253194544, 0.96852209427441727,
    0.96697647104485207, 0.9653944416976894, 0.96377606579543984,
    0.96212140426904158, 0.96043051941556579, 0.9587034748958716,
    0.95694033573220882, 0.95514116830577078, 0.95330604035419386,
    0.95143502096900834, 0.94952818059303667, 0.94758559101774109,
    0.94560732538052128, 0.94359345816196039, 0.94154406518302081,
    0.93945922360218992, 0.937339011912575, 0.93518350993894761,
    0.932992798834739, 0.93076696107898371, 0.92850608047321559,
    0.92621024213831138, 0.92387953251128674, 0.9215140393420419,
    0.91911385169005777, 0.9166790599210427, 0.91420975570353069,
    0.91170603200542988, 0.90916798309052238, 0.90659570451491533,
    0.90398929312344334, 0.901348847046022, 0.89867446569395382,
    0.89596624975618522, 0.89322430119551532, 0.89044872324475788,
    0.88763962040285393, 0.88479709843093779, 0.881921264348355,
    0.87901222642863353, 0.8760700941954066, 0.87309497841829009,
    0.87008699110871146, 0.86704624551569265, 0.8639728561215867,
    0.86086693863776731, 0.85772861000027212, 0.85455798836540053,
    0.8513551931052652, 0.84812034480329723, 0.84485356524970712,
    0.84155497743689844, 0.83822470555483808, 0.83486287498638,
    0.83146961230254524, 0.8280450452577558, 0.82458930278502529,
    0.82110251499110465, 0.81758481315158371, 0.81403632970594841,
    0.81045719825259477, 0.80684755354379933, 0.80320753148064494,
    0.799537269107905, 0.79583690460888357, 0.79210657730021239,
    0.78834642762660634, 0.78455659715557524, 0.78073722857209449,
    0.77688846567323244, 0.773010453362737, 0.7691033376455797,
    0.765167265622459, 0.76120238548426178, 0.75720884650648457,
    0.75318679904361252, 0.74913639452345937, 0.745057785441466,
    0.74095112535495922, 0.73681656887736979, 0.73265427167241282,
    0.7284643904482252, 0.724247082951467, 0.72000250796138165,
    0.71573082528381859, 0.71143219574521643, 0.70710678118654757,
    0.7027547444572253, 0.69837624940897292, 0.69397146088965389,
    0.68954054473706683, 0.68508366777270036, 0.680600997795453,
    0.67609270357531592, 0.67155895484701833, 0.66699992230363747,
    0.66241577759017178, 0.65780669329707864, 0.65317284295377676,
    0.64851440102211244, 0.64383154288979139, 0.63912444486377573,
    0.63439328416364549, 0.629638238914927, 0.62485948814238634,
    0.6200572117632891, 0.61523159058062682, 0.61038280627630948,
    0.60551104140432555, 0.600616479383869, 0.59569930449243336,
    0.59075970185887416, 0.58579785745643886, 0.58081395809576453,
    0.57580819141784534, 0.57078074588696726, 0.56573181078361312,
    0.560661576197336, 0.55557023301960218, 0.55045797293660481,
    0.54532498842204646, 0.54017147272989285, 0.53499761988709715,
    0.52980362468629461, 0.524589682678469, 0.51935599016558964,
    0.51410274419322166, 0.508830142543107, 0.50353838372571758,
    0.49822766697278181, 0.49289819222978404, 0.487550160148436,
    0.48218377207912272, 0.47679923006332209, 0.47139673682599764,
    0.46597649576796618, 0.46053871095824, 0.45508358712634384,
    0.44961132965460654, 0.4441221445704292, 0.43861623853852766,
    0.43309381885315196, 0.42755509343028208, 0.42200027079979968,
    0.41642956009763715, 0.41084317105790391, 0.40524131400498986,
    0.39962419984564679, 0.3939920400610481, 0.38834504669882625,
    0.38268343236508978, 0.37700741021641826, 0.37131719395183749,
    0.36561299780477385, 0.35989503653498811, 0.35416352542049034,
    0.34841868024943456, 0.34266071731199438, 0.33688985339222005,
    0.33110630575987643, 0.32531029216226293, 0.31950203081601569,
    0.31368174039889152, 0.30784964004153487, 0.30200594931922808,
    0.29615088824362379, 0.29028467725446233, 0.28440753721127188,
    0.27851968938505306, 0.272621355449949, 0.26671275747489837,
    0.26079411791527551, 0.25486565960451457, 0.24892760574572015,
    0.24298017990326387, 0.2370236059943672, 0.23105810828067111,
    0.22508391135979283, 0.2191012401568698, 0.21311031991609136,
    0.20711137619221856, 0.2011046348420919, 0.19509032201612825,
    0.18906866414980619, 0.18303988795514095, 0.17700422041214875,
    0.17096188876030122, 0.16491312048996992, 0.15885814333386145,
    0.15279718525844344, 0.14673047445536175, 0.14065823933284921,
    0.13458070850712617, 0.12849811079379317, 0.1224106751992162,
    0.11631863091190475, 0.11022220729388306, 0.10412163387205459,
    0.0980171403295606, 0.091908956497132724, 0.0857973123444399,
    0.079682437971430126, 0.073564563599667426, 0.067443919563664051,
    0.061320736302208578, 0.055195244349689941, 0.049067674327418015,
    0.04293825693494082, 0.036807222941358832, 0.030674803176636626,
    0.024541228522912288, 0.01840672990580482, 0.012271538285719925,
    0.0061358846491544753, 0.0 };

  coder::array<double, 2U> a__1;
  coder::array<double, 2U> b_smoothed_ppg_signal;
  coder::array<double, 2U> c_combined_coef_data;
  coder::array<double, 2U> indices;
  coder::array<double, 2U> smoothed_ppg_signal;
  double b_combined_coef_data[500];
  double d{ 0.0 };

  int combined_coef_size[2];
  int b_loop_ub_tmp{ 0 };

  int i;
  int loop_ub;
  int loop_ub_tmp;

  // SCORE_PPG_SIGNAL_FOURIER
  //  Returns the health scores of all pulses in a preprocessed
  //  PPG signal (via preprocess_ppg_signal(raw, timestamps)). See
  //  https://drive.google.com/file/u/3/d/1pe0JXUnOhZpmCMGCEVop8Zxzz9kD3FCD/view
  //  for complete details on algorithm, developed by Shreya.
  //  Preprocess signal and split it into pulses
  // SPLIT_PPG_SIGNAL
  //  Returns an array of indices such that each pair of
  //  adjacent indices forms a pulse in the ppg signal. Also returns smoothed
  //  PPG signal for debugging purposes
  //  Smooth the ppg signal aggressively using a moving average
  coder::filter(processed_ppg_signal, smoothed_ppg_signal);

  //  Fix the delay caused by the filter before finding the peaks
  if (smoothed_ppg_signal.size(1) - 19 < 19) {
    i = 0;
    loop_ub_tmp = 0;
  } else {
    i = 18;
    loop_ub_tmp = smoothed_ppg_signal.size(1) - 19;
  }

  loop_ub = loop_ub_tmp - i;
  b_smoothed_ppg_signal.set_size(1, loop_ub);
  for (loop_ub_tmp = 0; loop_ub_tmp < loop_ub; loop_ub_tmp++) {
    b_smoothed_ppg_signal[loop_ub_tmp] = -smoothed_ppg_signal[i + loop_ub_tmp];
  }

  coder::findpeaks(b_smoothed_ppg_signal, a__1, indices);

  //  Calculate scores of all pulses
  scores.set_size(indices.size(1) - 1);
  loop_ub = indices.size(1);
  if (loop_ub - 2 >= 0) {
    if (sMultiWord2Double((const unsigned int *)&coefficient_count.chunks[0U]) <
        1.0) {
      b_loop_ub_tmp = 0;
    } else {
      b_loop_ub_tmp = static_cast<int>(sMultiWord2Double((const unsigned int *)
        &coefficient_count.chunks[0U]));
    }

    d = sMultiWord2Double((const unsigned int *)&coefficient_count.chunks[0U]);
    combined_coef_size[0] = 1;
    combined_coef_size[1] = b_loop_ub_tmp;
  }

  for (int b_i{0}; b_i <= loop_ub - 2; b_i++) {
    creal_T yCol[500];
    double combined_coef_data[500];
    double d1;
    double y;
    int b_loop_ub;
    scores[b_i] = 0.0;
    y = indices[b_i];
    d1 = indices[b_i + 1];
    if (y > d1) {
      i = 0;
      loop_ub_tmp = 0;
    } else {
      i = static_cast<int>(y) - 1;
      loop_ub_tmp = static_cast<int>(d1);
    }

    // PREPROCESS_PPG_PULSE
    //  Returns a processed copy of a PPG pulse.
    //  Normalize and rescale to [0, 1] range
    b_loop_ub = loop_ub_tmp - i;
    smoothed_ppg_signal.set_size(1, b_loop_ub);
    for (loop_ub_tmp = 0; loop_ub_tmp < b_loop_ub; loop_ub_tmp++) {
      smoothed_ppg_signal[loop_ub_tmp] = processed_ppg_signal[i + loop_ub_tmp];
    }

    y = coder::combineVectorElements(smoothed_ppg_signal) / static_cast<double>
      (b_loop_ub);
    a__1.set_size(1, b_loop_ub);
    for (loop_ub_tmp = 0; loop_ub_tmp < b_loop_ub; loop_ub_tmp++) {
      a__1[loop_ub_tmp] = processed_ppg_signal[i + loop_ub_tmp] - y;
    }

    coder::b_abs(a__1, smoothed_ppg_signal);
    y = coder::internal::maximum(smoothed_ppg_signal);
    a__1.set_size(1, a__1.size(1));
    loop_ub_tmp = a__1.size(1) - 1;
    for (i = 0; i <= loop_ub_tmp; i++) {
      a__1[i] = a__1[i] / y;
    }

    //  Interpolate using cubic interpolation
    //  We want a fixed amount of samples for all pulses
    if (a__1.size(1) < 1) {
      smoothed_ppg_signal.set_size(1, 0);
    } else {
      smoothed_ppg_signal.set_size(1, b_loop_ub);
      for (i = 0; i <= loop_ub_tmp; i++) {
        smoothed_ppg_signal[i] = static_cast<double>(i) + 1.0;
      }
    }

    // CALCULATE_FOURIER_COEFFICIENTS
    //  Returns the real fourier coefficients of a preproccessed PPG pulse.
    //  FFT returns the coefficients in complex form, but we can convert that
    //  into the real form (sin/cos) using Euler's identity
    //  https://en.wikipedia.org/wiki/Sine_and_cosine_transforms#Relation_with_complex_exponentials
    coder::linspace(static_cast<double>(a__1.size(1)), combined_coef_data);
    coder::interp1(smoothed_ppg_signal, a__1, combined_coef_data,
                   b_combined_coef_data);
    coder::internal::fft::FFTImplementationCallback::doHalfLengthBluestein
      (b_combined_coef_data, yCol, wwc, dv, sintabinv);
    for (i = 0; i < b_loop_ub_tmp; i++) {
      b_combined_coef_data[i] = yCol[i].re;
    }

    if (d < 1.0) {
      smoothed_ppg_signal.set_size(1, 0);
    } else {
      b_loop_ub = static_cast<int>(d - 1.0);
      smoothed_ppg_signal.set_size(1, static_cast<int>(d - 1.0) + 1);
      for (i = 0; i <= b_loop_ub; i++) {
        smoothed_ppg_signal[i] = static_cast<double>(i) + 1.0;
      }
    }

    c_combined_coef_data.set(&b_combined_coef_data[0], 1, b_loop_ub_tmp);
    y = coder::combineVectorElements(c_combined_coef_data);
    for (i = 0; i < b_loop_ub_tmp; i++) {
      combined_coef_data[i] = b_combined_coef_data[i] / y;
    }

    scores[b_i] = coder::dot(combined_coef_data, combined_coef_size,
      smoothed_ppg_signal);
  }
}

void score_ppg_signal_linear_slope(const coder::array<double, 2U>
  &processed_ppg_signal, coder::array<double, 1U> &scores)
{
  coder::array<double, 2U> a__1;
  coder::array<double, 2U> b_smoothed_ppg_signal;
  coder::array<double, 2U> indices;
  coder::array<double, 2U> smoothed_ppg_signal;
  double a__3;
  int i;
  int loop_ub;
  int loop_ub_tmp;

  // SCORE_PPG_LINEAR_SLOPE
  //  Returns the health scores of all pulses in a preprocessed
  //  PPG signal (via preprocess_ppg_signal(raw, timestamps)). See Victoria
  //  Ouyang's thesis for details -- this algorithm simply calculates
  //  the slope of the rising edge of each pulse.
  //  Split signal into pulses
  // SPLIT_PPG_SIGNAL
  //  Returns an array of indices such that each pair of
  //  adjacent indices forms a pulse in the ppg signal. Also returns smoothed
  //  PPG signal for debugging purposes
  //  Smooth the ppg signal aggressively using a moving average
  coder::filter(processed_ppg_signal, smoothed_ppg_signal);

  //  Fix the delay caused by the filter before finding the peaks
  if (smoothed_ppg_signal.size(1) - 19 < 19) {
    i = 0;
    loop_ub_tmp = 0;
  } else {
    i = 18;
    loop_ub_tmp = smoothed_ppg_signal.size(1) - 19;
  }

  loop_ub = loop_ub_tmp - i;
  b_smoothed_ppg_signal.set_size(1, loop_ub);
  for (loop_ub_tmp = 0; loop_ub_tmp < loop_ub; loop_ub_tmp++) {
    b_smoothed_ppg_signal[loop_ub_tmp] = -smoothed_ppg_signal[i + loop_ub_tmp];
  }

  coder::findpeaks(b_smoothed_ppg_signal, a__1, indices);

  //  Calculate scores of all pulses
  scores.set_size(indices.size(1) - 1);
  loop_ub = indices.size(1);
  for (int b_i{0}; b_i <= loop_ub - 2; b_i++) {
    double b_dv[500];
    double ppg_pulse[500];
    double a__2;
    double y;
    int b_loop_ub;
    scores[b_i] = 0.0;
    y = indices[b_i];
    a__2 = indices[b_i + 1];
    if (y > a__2) {
      i = 0;
      loop_ub_tmp = 0;
    } else {
      i = static_cast<int>(y) - 1;
      loop_ub_tmp = static_cast<int>(a__2);
    }

    // PREPROCESS_PPG_PULSE
    //  Returns a processed copy of a PPG pulse.
    //  Normalize and rescale to [0, 1] range
    b_loop_ub = loop_ub_tmp - i;
    smoothed_ppg_signal.set_size(1, b_loop_ub);
    for (loop_ub_tmp = 0; loop_ub_tmp < b_loop_ub; loop_ub_tmp++) {
      smoothed_ppg_signal[loop_ub_tmp] = processed_ppg_signal[i + loop_ub_tmp];
    }

    y = coder::combineVectorElements(smoothed_ppg_signal) / static_cast<double>
      (b_loop_ub);
    a__1.set_size(1, b_loop_ub);
    for (loop_ub_tmp = 0; loop_ub_tmp < b_loop_ub; loop_ub_tmp++) {
      a__1[loop_ub_tmp] = processed_ppg_signal[i + loop_ub_tmp] - y;
    }

    coder::b_abs(a__1, smoothed_ppg_signal);
    y = coder::internal::maximum(smoothed_ppg_signal);
    a__1.set_size(1, a__1.size(1));
    loop_ub_tmp = a__1.size(1) - 1;
    for (i = 0; i <= loop_ub_tmp; i++) {
      a__1[i] = a__1[i] / y;
    }

    //  Interpolate using cubic interpolation
    //  We want a fixed amount of samples for all pulses
    if (a__1.size(1) < 1) {
      smoothed_ppg_signal.set_size(1, 0);
    } else {
      smoothed_ppg_signal.set_size(1, b_loop_ub);
      for (i = 0; i <= loop_ub_tmp; i++) {
        smoothed_ppg_signal[i] = static_cast<double>(i) + 1.0;
      }
    }

    coder::linspace(static_cast<double>(a__1.size(1)), b_dv);
    coder::interp1(smoothed_ppg_signal, a__1, b_dv, ppg_pulse);
    y = find_pulse_points(ppg_pulse, a__2, a__3);
    if (y == 1.0) {
      scores[b_i] = 0.0;
    } else {
      scores[b_i] = (ppg_pulse[static_cast<int>(y) - 1] - ppg_pulse[0]) / (y -
        1.0);
    }
  }
}

void score_ppg_signal_peak_detection(const coder::array<double, 2U>
  &processed_ppg_signal, coder::array<double, 1U> &scores)
{
  coder::array<double, 2U> a__1;
  coder::array<double, 2U> b_smoothed_ppg_signal;
  coder::array<double, 2U> indices;
  coder::array<double, 2U> smoothed_ppg_signal;
  double dicrotic_notch;
  int i;
  int loop_ub;
  int loop_ub_tmp;

  // SCORE_PPG_SIGNAL_PEAK_DETECTION
  //  Returns the health scores of all pulses in a preprocessed
  //  PPG signal (via preprocess_ppg_signal(raw, timestamps)). Uses peak
  //  detection to find position of dicrotic notch relative to the
  //  diastolic and systolic peaks.
  //  Split signal into pulses
  // SPLIT_PPG_SIGNAL
  //  Returns an array of indices such that each pair of
  //  adjacent indices forms a pulse in the ppg signal. Also returns smoothed
  //  PPG signal for debugging purposes
  //  Smooth the ppg signal aggressively using a moving average
  coder::filter(processed_ppg_signal, smoothed_ppg_signal);

  //  Fix the delay caused by the filter before finding the peaks
  if (smoothed_ppg_signal.size(1) - 19 < 19) {
    i = 0;
    loop_ub_tmp = 0;
  } else {
    i = 18;
    loop_ub_tmp = smoothed_ppg_signal.size(1) - 19;
  }

  loop_ub = loop_ub_tmp - i;
  b_smoothed_ppg_signal.set_size(1, loop_ub);
  for (loop_ub_tmp = 0; loop_ub_tmp < loop_ub; loop_ub_tmp++) {
    b_smoothed_ppg_signal[loop_ub_tmp] = -smoothed_ppg_signal[i + loop_ub_tmp];
  }

  coder::findpeaks(b_smoothed_ppg_signal, a__1, indices);

  //  Calculate scores of all pulses
  scores.set_size(indices.size(1) - 1);
  loop_ub = indices.size(1);
  for (int b_i{0}; b_i <= loop_ub - 2; b_i++) {
    double b_dv[500];
    double ppg_pulse[500];
    double diastolic_peak;
    double y;
    int b_loop_ub;
    scores[b_i] = 0.0;
    y = indices[b_i];
    diastolic_peak = indices[b_i + 1];
    if (y > diastolic_peak) {
      i = 0;
      loop_ub_tmp = 0;
    } else {
      i = static_cast<int>(y) - 1;
      loop_ub_tmp = static_cast<int>(diastolic_peak);
    }

    // PREPROCESS_PPG_PULSE
    //  Returns a processed copy of a PPG pulse.
    //  Normalize and rescale to [0, 1] range
    b_loop_ub = loop_ub_tmp - i;
    smoothed_ppg_signal.set_size(1, b_loop_ub);
    for (loop_ub_tmp = 0; loop_ub_tmp < b_loop_ub; loop_ub_tmp++) {
      smoothed_ppg_signal[loop_ub_tmp] = processed_ppg_signal[i + loop_ub_tmp];
    }

    y = coder::combineVectorElements(smoothed_ppg_signal) / static_cast<double>
      (b_loop_ub);
    a__1.set_size(1, b_loop_ub);
    for (loop_ub_tmp = 0; loop_ub_tmp < b_loop_ub; loop_ub_tmp++) {
      a__1[loop_ub_tmp] = processed_ppg_signal[i + loop_ub_tmp] - y;
    }

    coder::b_abs(a__1, smoothed_ppg_signal);
    y = coder::internal::maximum(smoothed_ppg_signal);
    a__1.set_size(1, a__1.size(1));
    loop_ub_tmp = a__1.size(1) - 1;
    for (i = 0; i <= loop_ub_tmp; i++) {
      a__1[i] = a__1[i] / y;
    }

    //  Interpolate using cubic interpolation
    //  We want a fixed amount of samples for all pulses
    if (a__1.size(1) < 1) {
      smoothed_ppg_signal.set_size(1, 0);
    } else {
      smoothed_ppg_signal.set_size(1, b_loop_ub);
      for (i = 0; i <= loop_ub_tmp; i++) {
        smoothed_ppg_signal[i] = static_cast<double>(i) + 1.0;
      }
    }

    coder::linspace(static_cast<double>(a__1.size(1)), b_dv);
    coder::interp1(smoothed_ppg_signal, a__1, b_dv, ppg_pulse);
    y = find_pulse_points(ppg_pulse, diastolic_peak, dicrotic_notch);
    if (y == diastolic_peak) {
      scores[b_i] = 0.0;
    } else {
      y = ppg_pulse[static_cast<int>(y) - 1];
      scores[b_i] = (y - ppg_pulse[static_cast<int>(dicrotic_notch) - 1]) / (y -
        ppg_pulse[static_cast<int>(diastolic_peak) - 1]);
    }
  }
}

void score_ppg_signal_rising_edge_area(const coder::array<double, 2U>
  &processed_ppg_signal, coder::array<double, 1U> &scores)
{
  coder::array<double, 2U> a__1;
  coder::array<double, 2U> b_a__4_data;
  coder::array<double, 2U> b_smoothed_ppg_signal;
  coder::array<double, 2U> indices;
  coder::array<double, 2U> smoothed_ppg_signal;
  double a__4_data[500];
  double first_derivative_peak_indices_data[500];
  double a__3;
  int i;
  int loop_ub;
  int loop_ub_tmp;

  // SCORE_PPG_RISING_EDGE_AREA
  //  Returns the health scores of all pulses in a preprocessed
  //  PPG signal (via preprocess_ppg_signal(raw, timestamps)). See Victoria
  //  Ouyang's thesis for details -- this algorithm calculates the area under
  //  the rising edge curve.
  //  Split signal into pulses
  // SPLIT_PPG_SIGNAL
  //  Returns an array of indices such that each pair of
  //  adjacent indices forms a pulse in the ppg signal. Also returns smoothed
  //  PPG signal for debugging purposes
  //  Smooth the ppg signal aggressively using a moving average
  coder::filter(processed_ppg_signal, smoothed_ppg_signal);

  //  Fix the delay caused by the filter before finding the peaks
  if (smoothed_ppg_signal.size(1) - 19 < 19) {
    i = 0;
    loop_ub_tmp = 0;
  } else {
    i = 18;
    loop_ub_tmp = smoothed_ppg_signal.size(1) - 19;
  }

  loop_ub = loop_ub_tmp - i;
  b_smoothed_ppg_signal.set_size(1, loop_ub);
  for (loop_ub_tmp = 0; loop_ub_tmp < loop_ub; loop_ub_tmp++) {
    b_smoothed_ppg_signal[loop_ub_tmp] = -smoothed_ppg_signal[i + loop_ub_tmp];
  }

  coder::findpeaks(b_smoothed_ppg_signal, a__1, indices);

  //  Calculate scores of all pulses
  scores.set_size(indices.size(1) - 1);
  loop_ub = indices.size(1);
  for (int b_i{0}; b_i <= loop_ub - 2; b_i++) {
    double first_derivative[500];
    double ppg_pulse[500];
    double a__2;
    double ending_point;
    int a__4_size[2];
    int first_derivative_peak_indices_size[2];
    int b_loop_ub;
    scores[b_i] = 0.0;
    ending_point = indices[b_i];
    a__2 = indices[b_i + 1];
    if (ending_point > a__2) {
      i = 0;
      loop_ub_tmp = 0;
    } else {
      i = static_cast<int>(ending_point) - 1;
      loop_ub_tmp = static_cast<int>(a__2);
    }

    // PREPROCESS_PPG_PULSE
    //  Returns a processed copy of a PPG pulse.
    //  Normalize and rescale to [0, 1] range
    b_loop_ub = loop_ub_tmp - i;
    smoothed_ppg_signal.set_size(1, b_loop_ub);
    for (loop_ub_tmp = 0; loop_ub_tmp < b_loop_ub; loop_ub_tmp++) {
      smoothed_ppg_signal[loop_ub_tmp] = processed_ppg_signal[i + loop_ub_tmp];
    }

    ending_point = coder::combineVectorElements(smoothed_ppg_signal) /
      static_cast<double>(b_loop_ub);
    a__1.set_size(1, b_loop_ub);
    for (loop_ub_tmp = 0; loop_ub_tmp < b_loop_ub; loop_ub_tmp++) {
      a__1[loop_ub_tmp] = processed_ppg_signal[i + loop_ub_tmp] - ending_point;
    }

    coder::b_abs(a__1, smoothed_ppg_signal);
    ending_point = coder::internal::maximum(smoothed_ppg_signal);
    a__1.set_size(1, a__1.size(1));
    loop_ub_tmp = a__1.size(1) - 1;
    for (i = 0; i <= loop_ub_tmp; i++) {
      a__1[i] = a__1[i] / ending_point;
    }

    //  Interpolate using cubic interpolation
    //  We want a fixed amount of samples for all pulses
    if (a__1.size(1) < 1) {
      smoothed_ppg_signal.set_size(1, 0);
    } else {
      smoothed_ppg_signal.set_size(1, b_loop_ub);
      for (i = 0; i <= loop_ub_tmp; i++) {
        smoothed_ppg_signal[i] = static_cast<double>(i) + 1.0;
      }
    }

    coder::linspace(static_cast<double>(a__1.size(1)), first_derivative);
    coder::interp1(smoothed_ppg_signal, a__1, first_derivative, ppg_pulse);
    ending_point = find_pulse_points(ppg_pulse, a__2, a__3);

    //  Find the first derivative
    coder::gradient(ppg_pulse, first_derivative);
    coder::b_findpeaks(first_derivative, a__4_data, a__4_size,
                       first_derivative_peak_indices_data,
                       first_derivative_peak_indices_size);
    if (first_derivative_peak_indices_size[1] == 0) {
      scores[b_i] = 0.0;
    } else {
      double first_derivative_peak_indices[2];

      //  Find integration points
      first_derivative_peak_indices[0] = first_derivative_peak_indices_data[0];
      first_derivative_peak_indices[1] = ending_point;
      ending_point = coder::internal::maximum(first_derivative_peak_indices);

      //  Integral of second derivative (numerator) and original pulse (denominator)
      if (first_derivative_peak_indices_data[0] > ending_point) {
        i = 0;
        loop_ub_tmp = 0;
      } else {
        i = static_cast<int>(first_derivative_peak_indices_data[0]) - 1;
        loop_ub_tmp = static_cast<int>(ending_point);
      }

      b_loop_ub = loop_ub_tmp - i;
      for (loop_ub_tmp = 0; loop_ub_tmp < b_loop_ub; loop_ub_tmp++) {
        a__4_data[loop_ub_tmp] = ppg_pulse[i + loop_ub_tmp];
      }

      b_a__4_data.set(&a__4_data[0], 1, b_loop_ub);
      scores[b_i] = std::abs((first_derivative[static_cast<int>(ending_point) -
        1] - first_derivative[static_cast<int>
        (first_derivative_peak_indices_data[0]) - 1]) / coder::
        combineVectorElements(b_a__4_data));
    }
  }
}

// End of code generation (preprocess_ppg_signal.cpp)
